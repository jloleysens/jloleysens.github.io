{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/code/reflecting-on-either-4-years-later/","result":{"data":{"site":{"siteMetadata":{"title":"Jean-Louis Leysens","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"d904e290-6652-5217-ac14-5755a2306d92","excerpt":"About 4 years ago I wrote a post about  and its role in error handling. I wanted to revisit this topic. Primarily to say that my conclusion was largely wrong‚Ä¶","html":"<p>About 4 years ago I wrote <a href=\"/code/either\">a post</a> about <code class=\"language-text\">Either</code> and its role in error handling. I wanted to revisit this topic. Primarily to say that my conclusion was largely <strong>wrong</strong>. Specifically my critique of this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction1</span> <span class=\"token operator\">=</span> resource <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> locked <span class=\"token operator\">=</span> <span class=\"token function\">lockSomeResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">doSomethingCoolButDangerous</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">something went wrong with locking the resource or doing something dangerous, either way: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">could not unlock the resource because: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>My initial conclusion was that nested try-catch blocks are a blight on the earth. However, I now know that you are far more likely to encounter code like üëÜüèª in any serious software application‚Äôs code than <em>anything</em> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>resource<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    either<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>lockSomeResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">mapLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this never runs!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span>\n      <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">doSomethingCoolButDangerous</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">,</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">bimap</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">,</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span>_e<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Our final result, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_e<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Not our final result'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fold</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">,</span> identity<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And there are several reasons for it:</p>\n<ol>\n<li>Most useful non-trivial software systems are developed and maintained in collaboration with other developers (a.k.a humans). They will have spent hundreds or thousands of hours reading code that is far closer in presentation to the first snippet than the latter. This means they can understand it, debug it, and contribute to future iterations with confidence.</li>\n<li>The first snippet is objectively simpler. There are fewer concepts to understand (i.e. accessible for beginners and experts).</li>\n<li>The second snippet is following strong FP practices. I wrote <a href=\"/code/fp-in-js/\">a post</a> a while ago about why we should avoid strong FP practices in JavaScript.</li>\n<li>Kind of related to point (1), given that most code fellow humans work on and need to grok will not be in this paradigm it‚Äôs unlikely that you will have the opportunity to even get code like past review.</li>\n<li>‚Ä¶and, yes, least importantly, the first snippet is probably more performant.</li>\n</ol>\n<p>So‚Ä¶ should I delete my original post? I don‚Äôt think so.</p>\n<p>I think programmers should be curious by nature. Interested in learning about new approaches and their relative strengths and weaknesses. In a predominantly FP codebase it might make perfect sense to adopt the patterns of my second snippet. Additionally, FP has a great friend in JS, in spite of all JS‚Äôs pitfalls when it comes to the purity that true FP demands (again, see my <a href=\"/code/fp-in-js/\">post</a> about it).</p>\n<p>We use high-level programming languages to make our lives easier. They are a sort of local optimum for capturing logic and flexibility for that logic to evolve. It‚Äôs in our interest to make sure we are leveraging it for the greatest impact. That means: probably <strong>don‚Äôt</strong> use <code class=\"language-text\">Either</code> in your TypeScript or JavaScript code.</p>","frontmatter":{"title":"Reflecting on `Either` 4 Years Later","date":"March 27, 2024"}}},"pageContext":{"category":"code","slug":"/code/reflecting-on-either-4-years-later/","previous":{"fields":{"slug":"/code/coding-a-product/"},"frontmatter":{"title":"Coding a product"}},"next":null}},"staticQueryHashes":["1122645626","63159454"],"slicesMap":{}}