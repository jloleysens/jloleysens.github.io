<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[JŒªO]]></title><description><![CDATA[Mah blog]]></description><link>https://jloleysens.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 28 Jun 2020 16:37:37 GMT</lastBuildDate><item><title><![CDATA[The Last of Us & The Last of Us part II]]></title><description><![CDATA[The Last of Us (TLOU) part II was released on June 19th 2020. The studio
that masterminded its creation, Naughty Dog, has dedicated an‚Ä¶]]></description><link>https://jloleysens.github.io//video-games/tlou-part-ii/</link><guid isPermaLink="false">https://jloleysens.github.io//video-games/tlou-part-ii/</guid><pubDate>Sun, 28 Jun 2020 10:47:52 GMT</pubDate><content:encoded>&lt;p&gt;The Last of Us (TLOU) part II was released on June 19th 2020. The studio
that masterminded its creation, Naughty Dog, has dedicated an enormous amount
of resources to creating this game. And I think what they have made reaches
beyond the scope of video game and deep into the realm of art and story telling.
This post is about unpacking this further, but as a preface I would like to state
from the outset that I did not like a lot of the decisions that were made for this
game. I did not like it, but I still marvel at it.&lt;/p&gt;
&lt;p&gt;Before going any further, please note that &lt;strong&gt;this discussion contains many spoilers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;TLOU part II picks up some years after where the first game left off. With
Ellie and Joel still in Jackson. It seems their cross-country
travelling has settled into a routine much closer to the normality of the
before-times. Albeit with the occasional patrol duty that has them fighting off
infected that threaten to encroach upon their haven. Children play in the
streets, warm fires are burning indoors and new relationships are burgeoning.
It is clear from the outset, however, that not all is well between Ellie and
Joel. At this point only you know what Joel did back in Salt
Lake. This fact, one could imagine, has been eating away at Ellie‚Äôs trust for
Joel over a number of years.&lt;/p&gt;
&lt;p&gt;For me, and for many others I would argue, the closeness and significance of
the relationship between Ellie and Joel becomes the linchpin and central
driving force for the decisions made in the first game. The first game ends
on a particularly melancholic note in this regard. Joel lies to Ellie about
the reason they left Salt Lake and that her gift of immunity could not be
converted into the gift of a vaccine for many. The weight of this can only
be known if you have played the first game, and I would strongly encourage
newcomers to do so.&lt;/p&gt;
&lt;p&gt;Joel is a cowboy. In the most classic and archetypal sense. He is a man of few
words and a countenance of impenetrabililty. Think back to the first game when
Joel would brutally slaughter infected and adversarial non-infected alike only
to offer a closing remark: ‚ÄúThat‚Äôs that‚Äù. Pushing on into new hellish experiences
of seemingly relentless violence and hopelessness. Hopelessness. Remember that word.
In the first game, the theme of hopelessness is central but Joel and Ellie represent
a defiance against it. Not one that is incorruptible. But one that is human and
tenacious. Joel holds on to Ellie and Ellie holds on to the hope for a new future.
That equation is woven throughout the first game. But what happens when the new
future demands a sacrifice Joel cannot make? He claims back his reason to live. Joel
knows above all else what is required for his survival, and through the course of the
first game that becomes Ellie - his reincarnated daughter.&lt;/p&gt;
&lt;p&gt;Fast-forward to TLOU part II; we are confronted with the reality that
Joel‚Äôs past decisions are not without consequence. He claimed back Ellie but it
came at a great cost; a vaccine for the virus that has maimed humanity -
limping onward into a pointless struggle of zero-sum games between tribal
factions.  A truly fractured civilisation. Another cost; Ellie‚Äôs primary source
of significance. It is clear that Ellie wrestles with this loss and blames Joel
for this openly. There is one scene in the later chapters of the second game
that displays as much. The ultimate cost is Joel‚Äôs very life. He crossed too
many lines in his violent, bloody rescue mission. Joel murders the only person
that could create a vaccine to restore humanity and in the process creates a
mortal enemy.&lt;/p&gt;
&lt;p&gt;The cost of Ellie‚Äôs significance is more nuanced of course. For Ellie, Joel
partially fills the void of insignificance.
He writes her a song; ‚ÄúIf I ever were to lose you, I
would surely lose myself‚Ä¶‚Äú. Ellie echoes this song throughout the course of the
second game in moments of reflection. Playing on the guitar that Joel made for her.
The guitar represents Joel and the hope that the Fireflies represented in the
first game. The song expresses the significance Joel embued onto her, something
she holds on to. But it also represnts the anger, hate and distrust of Joel‚Äôs
selfish short-sightedness. Ellie knows that the significance she gets from Joel
pales in comparison to the significance her life could have had if the events
of Salt Lake were different. Joel admits that given a second chance to go to
Salt Lake, he would do the same thing in rescuing Ellie. Let that sink in. Joel is unchanging.
Joel is conservation of what little you still have. Joel is survival at any
cost. This cuts deeply for Ellie and creates a blight on the precious Ellie-Joel
relationship that never fully recovers.&lt;/p&gt;
&lt;p&gt;TLOU part II, for me, is an excellent portrayal of Ellie‚Äôs process of
dealing with Joel‚Äôs death and letting go of the past. This is by far the richest component of the story. The
rest of the story I found uncompelling. The rest being roughly 60% of the game.
This is really unfortunate. I would recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=GB20A8CitRU&amp;#x26;&quot;&gt;SkillUp‚Äôs
review&lt;/a&gt; as a supplement to this
review because he has done an excellent job alluding to the wake TLOU leaves
TLOU part II in - I especially found the comparison to the new Start Wars vs the old
Star Wars to be apt. TLOU part II sends you down a path of hopelessness and concludes on
a net loss. Many people die and none are richer for any actions the central
characters make in the game. This coupled with the &lt;em&gt;very long&lt;/em&gt; exposition into
the life of Abby makes for an oppressive and costly experience for the games audience.&lt;/p&gt;
&lt;p&gt;Abby is the daughter of the doctor who Joel kills in the first
game&lt;sup&gt;1&lt;/sup&gt;. Abby‚Äôs tie to Joel and Ellie is on the basis of her father‚Äôs
death. The conclusion of Abby‚Äôs cobbled-together revenge story launches Ellie
into her own petty counter-revenge story. The motivation being that a large
part of her remaining source of significance, Joel, is brutally killed in
front of her. Ellie is on a war path and drags loved ones around her into a
spiralling sequence of bad-to-worse events. This is problematic. TLOU part II
runs against the grain of who Ellie is. One must conclude that the Ellie of TLOU
has so erroded that what remains is the worst parts of Joel. The situation is
utterly hopeless from the outset.&lt;/p&gt;
&lt;p&gt;TLOU is a game that challenges its audience to mix the bad with the good. No
one is only one or the other and outcomes are not purely one or the other. But
in TLOU part II Naughty Dog have managed to create a world where the outcome is
only bad. The scales rarely, if ever, tip to a much needed good outcome. I
found this to be a harrowing experience and somewhat boring as I raced through
the parts of the game expounding the life and times of Abby. None are looking
for the light. Except, perhaps, Owen, who gets killed off at any rate.&lt;/p&gt;
&lt;p&gt;In summary, my thoughts and feelings (TLOU is a game that plays with your feelings
unlike any other) are very mixed and my review of the follow up game is mostly
negative at this point. However, I do believe that TLOU part II is special. It is a
significant game and a deeply thought provoking one despite ham-fisted story-telling
at times (looking at you Seraphite vs WLF war). Do not play TLOU part II expecting
to feel better. It will make you feel worse and it is a costly experience for the invested
player.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;I am not going to spend too much time discussing a core tension in TLOU;
violence and guilt and how they relate to the core gameplay mechanics and
narrative. The game has you killing people constantly but expects you to
feel guilt when your character murders another important character. For this
I can suspend my disbelief and treat enemies as puzzles, nothing more. Even though
the game tries to trick you into thinking they are also people by giving them names üôÑ.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[The most important thing a programmer does]]></title><description><![CDATA[In JavaScript there are so many different technologies to learn and become
proficient with. Each introducing its own mental model and best‚Ä¶]]></description><link>https://jloleysens.github.io//code/most-important/</link><guid isPermaLink="false">https://jloleysens.github.io//code/most-important/</guid><pubDate>Mon, 15 Jun 2020 14:31:39 GMT</pubDate><content:encoded>&lt;p&gt;In JavaScript there are so many different technologies to learn and become
proficient with. Each introducing its own mental model and best practices.
This spans databases all the way to user experience (UX) concerns. For some of
these technologies understanding the operational concerns involved is a
non-trivial learning curve in itself. For instance, properly configuring a
database for your application is of vital importance for any serious web
application. The structuring but also the scaling of the database. Granted, the
advent of cloud in the early 2010s has made a lot of these operational concerns
easier to get started with however they have a silent cost of abstracting away
many details that can cause major issues or headaches in specific instances -
you may risk running an excessively large bill to the cloud providers
delight!&lt;/p&gt;
&lt;p&gt;The point of this post is to say that none of these things are &lt;em&gt;actually&lt;/em&gt; important
for the programmer. Or at least not of the highest import. Understanding
different technologies can be substituted with understanding different
models and techniques and what &lt;em&gt;algorithms&lt;/em&gt; these different methods and
techniques make feasible or infeasible. The most important role of
the programmer by my estimation is that of algorithmist. The individual
who cares most about what sequential steps are taken to solve a problem is
predisposed to a vital part of programming. This individual cares at a low-level
about the order of execution.&lt;/p&gt;
&lt;p&gt;Take the example of a shopping cart. You can add and remove things from the
shopping cart. The shopping cart knows what products it. It also knows that
if it has two of the same product it should not display two of the same product
but rather a count of the number of items of that particular product.&lt;/p&gt;
&lt;p&gt;Think about how you might add something to a cart like this.&lt;/p&gt;
&lt;p&gt;Now think about how you might remove something from a cart like this.&lt;/p&gt;
&lt;p&gt;Clearly there are some concerns which must be wrestled with in order to create
the correct behaviour. The correct algorithm. Here is my fast and loose, imperative-style, take
on a solution:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// A cart containing product objects with id and count: { id: number, count: number } &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cart &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addToCart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;productToAdd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; product &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; cart&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; productToAdd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// In JS ++ before the variable produces a different algorithm to&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// ++ after the variable. Not of great import here however.&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  cart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;productToAdd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;removeFromCart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;productToRemove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; cart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; product &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cart&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; productToRemove&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Here our unary first changes the algorithm&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        cart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I‚Äôd challenge the reader to consider how an algorithm might be written that
cannot work by mutation as many languages require and certain patterns in
JavaScript like flux.&lt;/p&gt;
&lt;p&gt;I intended this post as a reminder to myself, more than for others about the biggest, most important role of the programmer. Happy algorithming!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[(Don't) write FP in JS]]></title><description><![CDATA[Write FP in JSI enjoy the teachings and precepts of Functional Programming (FP). I enjoy the
simplicity of it. It tends to force you to‚Ä¶]]></description><link>https://jloleysens.github.io//code/fp-in-js/</link><guid isPermaLink="false">https://jloleysens.github.io//code/fp-in-js/</guid><pubDate>Mon, 01 Jun 2020 10:56:41 GMT</pubDate><content:encoded>&lt;h2&gt;Write FP in JS&lt;/h2&gt;
&lt;p&gt;I enjoy the teachings and precepts of Functional Programming (FP). I enjoy the
simplicity of it. It tends to force you to think of one thing at a time. A
quote that unlocked the power of FP for me is by Alan J. Perlis, as stated in
Clojure‚Äôs rationale&lt;sup&gt;1&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is better to have 100 functions operate on one data structure than to have
10 functions operate on 10 data structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This idea, for me, shook the world of Object Oriented Programming (OOP). OOP
was not rendered without use, but there is certainly something to these
composable units (functions) that understand a shared interface. Something that
makes me hesitate to reach for object inheritance patterns and writing my own
APIs. Interfaces like arrays or lists. These are extremely simple data
structures that know nothing about your business logic. When we start creating
our own functions that operate on arrays and return arrays we quickly gain the
ability to express different sequences of higher-level &lt;em&gt;operations&lt;/em&gt; instead of
higher level &lt;em&gt;things&lt;/em&gt;. See Doug McIlroy‚Äôs solution to the problem of finding
the frequency of different words in a text file&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;All of this is possible in JS - as in many other languages. What
makes it even more pleasant to write in JS is that functions are first-class
values in the same way that objects or numbers are. This means we can write
functions that take functions as arguments ‚Äî a pattern that is used
extensively in many applications to solve different problems.&lt;/p&gt;
&lt;p&gt;Taking the teachings of FP a step further we can create law-abiding functions.
This is a more extreme version&lt;sup&gt;3&lt;/sup&gt; of the idea I stated earlier about shared
interfaces&lt;sup&gt;4&lt;/sup&gt;. These laws mean that we can reason about the flow of
our functions in a way that is analagous to mathematic formlae. This also leans
into thinking about our functions a type level; give me a number (a type) and I
will return a string (another type). I will leave further investigations into category
theory to the reader as it is beyond the scope of this article (enjoy
puzzle solving instead of problem solving!).&lt;/p&gt;
&lt;p&gt;At this point I would emphasise that all of the above is why we should almost
certainly choose for FP in JS. Why choose complexity (or complectedness) when
simplicity is not only feasible but desirable? This is something FP can
offer. What is more, there are theoretical or academic aspects to what I have
mentioned but an enormous amount of practical usefulness too. JS libraries like
&lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt;&lt;sup&gt;5&lt;/sup&gt; and &lt;a href=&quot;https://ramdajs.com/&quot;&gt;ramda&lt;/a&gt; have
demonstrated this usefulness in many real-world applications.&lt;/p&gt;
&lt;h2&gt;Don‚Äôt write FP in JS&lt;/h2&gt;
&lt;p&gt;Consider the following reasons you should absolutely not write FP in JS. I
would like to explore two reasons, but in reality they are linked and are utter
defeaters for FP in JS today.&lt;/p&gt;
&lt;h3&gt;Tail call optimization (TCO)&lt;/h3&gt;
&lt;p&gt;The reality is that JS is not a language that is optimised for all things FP.
For instance, FP makes heavy use of calling functions inside of functions.
Sometimes as a mechanism of iteration known as recursion. In a large number of
cases this is fine but in some cases this is totally not fine and will cause
your program to unexpectedly break.&lt;/p&gt;
&lt;p&gt;The reason your program will break is due to optimization. More specifically,
lack of FP optimization in how JS is built. This is not something you can code
around. It is woven into the very fabric of what JS &lt;em&gt;is&lt;/em&gt; today. JavaScript is
not a compiled&lt;sup&gt;6&lt;/sup&gt; or a TCO language. Even though much
work has been done in browsers and other runtimes to mitigate this, in the year
2020 it is still possible to blow the call stack. What does this mean? Well, in
simple terms your program asks for more memory than is available to it because
your implementation does not follow the JS rules‚Ñ¢. The stack depth is of finite
size, but the size is dependant upon the machine your JS runtime is running on.
You can not know in all cases how far you are permitted to go. If you choose to
implement this mechanism your code is instantly buggy. &lt;strong&gt;It will break&lt;/strong&gt;. Okay, I
have overstated the case slightly, it will break under certain conditions.
If you know that the data over which you are recursing will &lt;em&gt;never&lt;/em&gt; grow the
stack beyond, say, 10 levels deep, you are in the clear. When you do not know
how deep the stack may get you are in treachorous waters&lt;sup&gt;7&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Immutability (or lack thereof)&lt;/h3&gt;
&lt;p&gt;Another, and quite pressing reason to not go whole-hog FP in JS is because many
native data structures are not immutable. Consider this code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// { a: 42 }&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For someone who writes code in a language optimized for FP this may be a shock,
but to many others this may not be. The fact is objects, arrays and functions
are passed around as values which can be changed in an in-place way. This means
a change is visible to anyone with a reference to that value. This
violates the simplicity provided by functional purity. In order fix this we must
explicity copy our values. Like so: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myNewObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// { a: 1 }&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Problem solved! However, the problem is actually not sovled for many cases when
we have objects inside objects inside objects inside arrays. ‚ÄúLuckily‚Äù strings
and numbers are immutable. So to preserve the copying behaviour we so happily
acheived before we would need to do this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-js line-numbers&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originalObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; copyThatChangedD &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;originalObject&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;originalObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;originalObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      c&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;originalObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;originalObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immutable facade restored! There are many programmatic implementations that
were made to solve this very problem. But consider the case when we do not
always know how deep our data structure may be. We are back to the problem of
optimization I mentioned before because we will need to recurse! For
larger object structures, we can quickly incur a large performance cost and risk blowing
the stack again.&lt;/p&gt;
&lt;p&gt;There are many users of the web out there happily running old Android devices or
other low-memory environments which will not be able to handle the memory
footprint created by forcing native JS structures to be immutable.&lt;/p&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;There may be other cases where FP in JS is a bad fit, but I have tried to touch
on what I believe to the most problematic areas at present. So do we abandon
the FP in JS project? Definitely not! My advice is to be cautious when
implementing FP in JS. Think carefully about the environment in which your code
will run given the constraints in place. Use mutation to your advantage, it is
a truly powerful tool and your only saving grace for low(er)-memory devices
accessing your website or sending data to your JS server.&lt;/p&gt;
&lt;p&gt;Again, do not abandon FP in JS. It is a truly powerful tool that can help
create a simpler code base and it has a truly amazing friend in JS.
Unfortunately there are operational concerns that mean you will need to be a
cautious and pragmatic FP in JS programmer today. Well, actually, always be
pragmatic, please!&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Listed as one of the points
&lt;a href=&quot;https://clojure.org/about/rationale#_object_orientation_is_overrated&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;See &lt;a href=&quot;https://youtu.be/AkYDsiRVqno?t=875&quot;&gt;this&lt;/a&gt; section (roughly 2 minutes long) of a talk by Stefan
Tilkov. With special focus on the implementation by Donald Knuth vs Doug McIlroy.&lt;/li&gt;
&lt;li&gt;Today, at time of writing, I would argue pathologically extreme.&lt;/li&gt;
&lt;li&gt;See a library like &lt;a href=&quot;https://github.com/gcanti/fp-ts&quot;&gt;fp-ts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Please do not add this entire library as a dependency in new projects. There
are many security vulnerabilities that come with it and much of it‚Äôs
functionality has since been made available through JS natively.&lt;/li&gt;
&lt;li&gt;TypeScript is a &lt;em&gt;transpiler&lt;/em&gt; not a &lt;em&gt;compiler&lt;/em&gt; even though it may perform
tasks that are similar to a compiler.&lt;/li&gt;
&lt;li&gt;I have run into this very issue using a library like &lt;a href=&quot;https://github.com/immerjs/immer&quot;&gt;immer&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TODO]]></title><description><![CDATA[I have recently quite enjoyed the use of TODO comments. On one hand, there is
something really off-putting about having TODOs littered‚Ä¶]]></description><link>https://jloleysens.github.io//code/todo/</link><guid isPermaLink="false">https://jloleysens.github.io//code/todo/</guid><pubDate>Sun, 26 Apr 2020 13:14:52 GMT</pubDate><content:encoded>&lt;p&gt;I have recently quite enjoyed the use of TODO comments. On one hand, there is
something really off-putting about having TODOs littered across your code
base. Like threads of thought that did not have time to fully develop and are
now dangling appendages of what could have been if only someone had finished
the job at time, but for whatever reason could not.&lt;/p&gt;
&lt;p&gt;At their worst, TODOs are certainly things that I would avoid placing in code.
Your collaborators (or your future self) will come across them lacking the
context of your train of thought. In this way a TODO comment will seem like a
compromise (a trade-off for work unfinished) that was made without a clear
rationale. Usually a standard comment is more appropriate and should be used
liberally in cases where code may be in a state that is hard for new readers
to understand.&lt;/p&gt;
&lt;p&gt;At their best, TODOs are indicators of future work &lt;em&gt;placed right in the code&lt;/em&gt;.
It should be very clear to others (and your future self) what it is
that is yet to be done here; the surrounding code &lt;em&gt;is&lt;/em&gt; your context. It could
be a brief description of an improvement or a simple indicator that standard
protocol was skipped for the sake of brevity. ‚ÄúAh‚Äù, they will say, ‚Äúclearly a
new in-the-works component will replace this minimally viable one in future.
I am not going to spend time on improvements here‚Äù. That would be an awesome
outcome for a humble TODO comment. You have saved yourself and someone else
time by placing a clear marker in the code.&lt;/p&gt;
&lt;p&gt;Another excellent use of a TODO is when writing front-end code which often
calls for high quality copy that end users will read. In the early stages of
development of a new feature it is not worth spending time on this because your
work is in a state of flux. Figuring out copy while making architecture
decisions is time ill-spent. A simple &lt;code class=&quot;language-text&quot;&gt;TODO: translate&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;TODO: review copy&lt;/code&gt; comment will save you the mental tax of worrying about a separate
concern when all you need is a button in the UI that says: ‚ÄúDo the thing‚Äù.
The TODO will be especially useful when, in future, someone returns to address
these TODOs and can search for a &lt;em&gt;consistent&lt;/em&gt; convention. All translations
marked with &lt;code class=&quot;language-text&quot;&gt;TODO: translate&lt;/code&gt;, for instance.&lt;/p&gt;
&lt;p&gt;I have written many unhelpful comments and TODOs in the past. These
have the spin-off of creating double or triple work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When you return to re-read it and are not in the same flow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When someone
else reads it and misinterprets it, contacting you to explain your gibberish&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When someone else reads it, thinks they understand, executes based on their understanding,
then requests your review; leaving you with the job of reviewing and
re-explaining what you meant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of this actually goes to say; write comments as ‚Äúcontext-free‚Äù as
possible. The surrounding code may be all context that remains when you or
others return. Also write executable TODOs.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[On The Dillinger Escape Plan]]></title><description><![CDATA[The Dillinger Escape Plan (TDEP) are a special group, and I would like to
talk about why. I have probably listened to roughly 80% of their‚Ä¶]]></description><link>https://jloleysens.github.io//music/on-the-dillinger-escape-plan/</link><guid isPermaLink="false">https://jloleysens.github.io//music/on-the-dillinger-escape-plan/</guid><pubDate>Fri, 10 Apr 2020 12:38:13 GMT</pubDate><content:encoded>&lt;p&gt;The Dillinger Escape Plan (TDEP) are a special group, and I would like to
talk about why. I have probably listened to roughly 80% of their discography
and I was enraptured by their unique style that sought to undo many of the
comforts we have in conventional song-writing and musicianship.&lt;/p&gt;
&lt;p&gt;Some years ago I was playing a video game called Bioshock in which you ‚Äî the
protagonist ‚Äî crash land in the middle of the ocean in the opening chapter.
The cause of your misfortune is not disclosed. The still floating, burning
wreckage that was your plane is slowly sinking and so you are encouraged to
alight. Into the nebulous ocean waters.&lt;/p&gt;
&lt;p&gt;Fortunately a tower in the middle of the ocean is within swimming distance,
it is your only hope for survival. After dragging your apparently capable
self out of the ocean waters you enter the base of the tower. A banner
reading ‚ÄúNo gods or kings. Only man.‚Äù greets you. From here things get pretty
crazy. An elevator takes you to an undersea city where the brightest
scientific minds have created a safe haven for pushing the limits of what
humanity can achieve. Unfettered by scruples, all fronts of scientific
advancement have been pushed to dizzying heights. Humans have been augmented.
They can run faster, they are much stronger and they can shoot fire from
their finger-tips (because why not!?). Sub-human creatures act as enforcers
of an unspoken law. However, all is not well in Rapture.&lt;/p&gt;
&lt;p&gt;Greed and narcissism have won out over nobler pursuits. Self-improvement and
self-glorification have enticed inhabitants of Rapture to set totalitarian
goals leaving many scraping the bottom of the barrel. Medicaments that
augment abilities are also highly addictive which fostered a group insanity
within the populace. Their dignity stripped as well as their pockets. This is
where you enter.&lt;/p&gt;
&lt;p&gt;Cue the track ‚ÄúFix your face‚Äù from TDEPs album ‚ÄúIre Works‚Äù&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Delving deeper still into the mysteries of Rapture I continued to listen to
TDEP. A better musical match for the peculiar horrors in this underworld is a
tall order. Like the denizens of rapture, TDEP is truly manic and
schizophrenic. Their track ‚ÄúLurch‚Äù, a song about a stalker reflecting on the
object of his desire is as creepy as it is frantic - ‚Äú‚Ä¶your picture in my pocket I‚Äôm obsessed
with you‚Äù.&lt;/p&gt;
&lt;p&gt;Amidst this swirling chaos there are songs that are truly moments of quiet
clarity. None more so than, to my mind, the title track from ‚ÄúDissociation‚Äù.
Tracks like these invite a more reflective and personal mode, albeit
remaining true to the off-kilter sound TDEP work tirelessly to reproduce. A
combination of two drum tracks in the chorus drawing in and out of the left
and right sides of the stereo image create a sense of being in two states
simultaneously. Two-minds. Indecision. Ambiguity. Two narratives, not
intended to co-exist but somehow co-existing regardless. I have not heard a
better musical representation of these concepts which speaks to the maturity
TDEP achieved later in the bands career.&lt;/p&gt;
&lt;p&gt;From a sound perspective, TDEP have opted for more barky, rock-sounding
guitars - with blazingly high gain to be sure. They are not a &lt;em&gt;metal band&lt;/em&gt; but
they are also not quite, only a &lt;em&gt;hardcore band&lt;/em&gt;. They have created a specific
sound. All of these reasons are why TDEP are special and have become an
irreplaceable part of the kind of music I have come to love.&lt;/p&gt;
&lt;p&gt;I leave you with a final recommendation to listen to the track ‚ÄúWhen Good
Dogs Do Bad Things‚Äù from ‚Äúirony is a dead scene‚Äù. It is one of my personal
favorites and an uncharacteristically long song for TDEP. It showcases their
dynamism while staying true to the narrative they would go on to develop.&lt;/p&gt;
&lt;p&gt;R.I.P. TDEP.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;How is this from 2007?&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Errors and Either]]></title><description><![CDATA[Welcome to yet another post on the Internet about Monads! I am only mostly
kidding. I do not intend to use this post as an introduction to‚Ä¶]]></description><link>https://jloleysens.github.io//code/either/</link><guid isPermaLink="false">https://jloleysens.github.io//code/either/</guid><pubDate>Wed, 25 Mar 2020 17:52:07 GMT</pubDate><content:encoded>&lt;br /&gt;
&lt;p&gt;Welcome to yet another post on the Internet about Monads! I am only mostly
kidding. I do not intend to use this post as an introduction to
Monads&lt;sup&gt;1&lt;/sup&gt;. This post is actually a continuation of &lt;a href=&quot;../errors&quot;&gt;my post on
errors&lt;/a&gt;, and I would like to dig into the practical upshots of
implementing more thorough and efficient means of handling errors.
Specifically I am picking up the sentiment that &lt;em&gt;we can do better&lt;/em&gt;. Using
&lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; is one version of doing better that I‚Äôd like to consider in this
post.&lt;/p&gt;
&lt;p&gt;Consider the following diagram:&lt;/p&gt;
&lt;figure class=&quot;my-figure&quot;&gt;
  &lt;a name=&quot;fig1&quot;&gt;
    &lt;img src=&quot;../../pics/either/myprogram1.png&quot; alt=&quot;My program figure 1&quot; title=&quot;My program figure 1&quot;&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Figure 1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Figure 1 features elements of a typical program; a start point, branch
conditions and terminus points. Real programs could be expressed as sets of
these diagrams linked together, one‚Äôs output the input of the next. Our
branching here is focused on errors. Each diamond is a point at which we take
an action that &lt;em&gt;could&lt;/em&gt; result in an error condition. The &lt;code class=&quot;language-text&quot;&gt;s&lt;/code&gt; branch indicates
a successful result where the &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; branch indicates an unsuccessful result.
This is the error &lt;em&gt;control flow&lt;/em&gt; inherent in any program that could have
error conditions.&lt;/p&gt;
&lt;p&gt;The different terminus nodes indicate different end states that our program
can reach. Each end state indicates a different &lt;em&gt;type&lt;/em&gt; of output. This toy
program has four different potential terminus states. Following this pattern
we can imagine that if &lt;a href=&quot;./#fig1&quot;&gt;Figure 1&lt;/a&gt; program grew to any level of complexity there
would be explosion of terminus states as new points of error are introduced.&lt;/p&gt;
&lt;p&gt;Moreover, think about what the terminus point represents the end of the
programmers &lt;em&gt;intent&lt;/em&gt;. It is saying ‚ÄúWe have reached this point without
generating the outcome we had hoped, so send a message back &lt;em&gt;expressing this
unexpected event&lt;/em&gt;‚Äù. These intentions exist implicitly or explicitly in our
programs.&lt;/p&gt;
&lt;p&gt;This may sound like an ungracious description of how many programs work, but
practice is often not far off from this. Consider this JavaScript:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;lockSomeResource&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;unlockSomeResource&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doSomethingDangerous&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You got burned!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;resource&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;doSomethingDangerous&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;locked&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;unlockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;locked&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is a representation of one of the diamonds in &lt;a href=&quot;./#fig1&quot;&gt;Figure 1&lt;/a&gt;.
Clearly we will reach the &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; branch. And log the error to the browser
console. But consider what might happen if unlocking the resource is a known
potential point of error too. To achieve our goal of improved error messages
we might make the following alterations:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;lockSomeResource&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;unlockSomeResource&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nope!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doSomethingCoolButDangerous&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You got burned!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;myFunction1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomethingCoolButDangerous&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;locked&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`something went wrong with locking the resource or doing something dangerous, either way: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;unlockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;locked&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`could not unlock the resource because: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;myFunction1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;resource&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The snippet above is a representation of a path in &lt;a href=&quot;./#fig1&quot;&gt;Figure 1&lt;/a&gt; where
we reach two, successive error conditions. Nested try-catch blocks may seem
like overkill but they are the only way to ensure that our error states are
kept in check. We can continue to flesh out this example and perhaps refactor
our code so that each potentially dangerous call is inside of it‚Äôs own
try-catch block, we may even be tempted to provide a more generic way of
provisioning these try-catch-finally blocks for functions. Another point to notice here is that we have
assumed &lt;code class=&quot;language-text&quot;&gt;myFunction1&lt;/code&gt; should return something to the caller. Either it is the
result of &lt;code class=&quot;language-text&quot;&gt;doSomethingCoolButDangerous&lt;/code&gt; or it is &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;
‚Äî returning &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; is our implicit way of communicating that something went wrong,
let‚Äôs say we made this part of our contract to calling code. This is how a
lot of programs operate. I would assert we can do better than this,
and write less code with less nesting. Consider this revision to our graph:&lt;/p&gt;
&lt;figure class=&quot;my-figure&quot;&gt;
  &lt;a name=&quot;fig2&quot;&gt;
    &lt;img src=&quot;../../pics/either/myprogram2.png&quot; alt=&quot;My program figure 2&quot; title=&quot;My program figure 2&quot;&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Figure 2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the figure above we have eliminated all terminus points but one. In some sense
the diamonds have been made &lt;em&gt;totally irrelevant&lt;/em&gt; to the output of our
program. I would like to demonstrate that this is what the &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; monad
was made for. All paths lead to one output, no matter what happens. &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; can be considered an abstract way
of expressing uncertainty in our programs and so it is a very general data
type&lt;sup&gt;2&lt;/sup&gt;. The way &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; makes this possible is by placing the
result of our function inside of a &lt;em&gt;tagged container&lt;/em&gt;. It is this tagging
that lets subsequent code know whether some went right or wrong, in &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt;
terms; &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt;. Left denotes a failure where right denotes a success.
By placing values inside of containers like this we are able to associate some
metadata with the a given output. Consider this example (in TypeScript):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-typescript line-numbers&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;unsafeJSONParse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;unknownString&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function can easily represent one of the diamonds in our program where
an unknown string value can be passed in and one of two things will happen:
an error, or a newly minted object. Consider this revision with &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; as
implemented by &lt;a href=&quot;https://github.com/gcanti/fp-ts/blob/dcf0b105061c99ea6c82abba31800d544fb851d5/src/Either.ts#L64&quot;&gt;fp-ts&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-typescript line-numbers&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; tryCatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Either &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fp-ts/lib/Either&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jsonParse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unknownString&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; object&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;tryCatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unknownString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is slightly more verbose for a start, but if we look at the return type
we are now returning an &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt;&lt;sup&gt;3&lt;/sup&gt;! This change is most important
at a &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; level: we have now declared that &lt;code class=&quot;language-text&quot;&gt;jsonParse&lt;/code&gt; no longer produces
an &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt; but &lt;code class=&quot;language-text&quot;&gt;Right&amp;lt;object&amp;gt;&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code class=&quot;language-text&quot;&gt;Left&amp;lt;string&amp;gt;&lt;/code&gt;. The &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code class=&quot;language-text&quot;&gt;Left&lt;/code&gt;
result of this function is what enables us to eliminate other terminus
points. Furthermore we can now more generically handle control flow
introduced by errors. There is no need to ever have a nested try-catch block
again. Returning to our example from before, we can refactor like so (still
using fp-ts, though specific fp-ts knowledge is not required):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-typescript line-numbers&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pipe &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fp-ts/lib/pipeable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Either &lt;span class=&quot;token comment&quot;&gt;/* &amp;lt;- Type only */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  either&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  isRight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fp-ts/lib/Either&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lockSomeResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  eitherR&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isRight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eitherR&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;oops!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unlockSomeResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  eitherR&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;isRight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eitherR&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Try to unlock the resource but we failed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Something upstream failed, we do not have a resource to unlock&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; doSomethingCoolButDangerous &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  eitherR&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;isRight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;eitherR&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You got burned!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You got burned!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;myFunction1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Either&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;lockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    doSomethingCoolButDangerous&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    unlockSomeResource
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;myFunction1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;either&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;resource&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, that was an explosion of new code that looks very FP! You may be
wondering how on earth this is an improvement over the nested try-catch and
at this point it really is not. For instance, there seems to be more repeated
code, albeit not-nested. Also, what is this &lt;code class=&quot;language-text&quot;&gt;either.of&lt;/code&gt;? What is &lt;code class=&quot;language-text&quot;&gt;pipe&lt;/code&gt; even?
I would challenge the reader to not dig too deeply into those concepts but
rather to look at the body of &lt;code class=&quot;language-text&quot;&gt;myFunction1&lt;/code&gt;. What is being described there?
Take a moment to think about what the result of calling
&lt;code class=&quot;language-text&quot;&gt;myFunction1(either.of(&amp;#39;resource&amp;#39;));&lt;/code&gt; might be.&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;Ok, it‚Äôs:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{ _tag: &amp;#39;Left&amp;#39;,
  left:
   &amp;#39;Something upstream failed, we do not have a resource to unlock&amp;#39; }&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Trace through the code and consider how we arrived at &lt;em&gt;this&lt;/em&gt; result.&lt;/p&gt;
&lt;p&gt;Consider that we still have a fairly imperative way of laying out
instructions. The primary change has been to separate steps into functions
and we now have the &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; machinery so we don‚Äôt deal with values directly.
Instead, we interact with a &lt;em&gt;container&lt;/em&gt; that has been &lt;em&gt;tagged&lt;/em&gt; which
carries our value. In each of our functions we now accept &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; and return
&lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt;. At a type level we have achieved the simplification of our graph ‚Äî
one terminus ‚Äî but at the cost of developer experience and ergonomics.
Someone once told me that we don‚Äôt abstract something unless you have at least
three different instances of the same thing as a guiding rule. In the refactor above we
are repeatedly checking our code for &lt;code class=&quot;language-text&quot;&gt;isRight&lt;/code&gt; and then taking some action
based on that. We are wrestling with control flow at a &lt;em&gt;lower level&lt;/em&gt;.
However, I would argue that this is a very similar algorithm to what we had
above except that each point of error has been exposed and is being handled!&lt;/p&gt;
&lt;p&gt;The container itself is our signal for control flow through
our program. Currently it is cumbersome and we can certainly do
better ‚Äî fortunately others have already noticed this; consider a further
revision:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-typescript line-numbers&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  either&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  mapLeft&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  bimap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  chain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  tryCatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  fold&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fp-ts/lib/Either&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; identity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fp-ts/lib/function&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pipe &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fp-ts/lib/pipeable&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lockSomeResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  locked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unlockSomeResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Try to unlock the resource but we failed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; doSomethingCoolButDangerous &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You got burned!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;myFunction1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    either&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lockSomeResource&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;mapLeft&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;this never runs!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;tryCatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomethingCoolButDangerous&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;bimap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;tryCatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unlockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`Our final result, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; and &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;_e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;tryCatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unlockSomeResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Not our final result&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;identity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; identity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;myFunction1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;resource&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are now close to a final version and our original &lt;code class=&quot;language-text&quot;&gt;myFunction1&lt;/code&gt; is
intact. Control flow is now happening at a higher level thanks to the
different functions (or operators) for working with data types. Technically there is still
some amount of ‚Äúnesting‚Äù but we will never need to go deeper than this. There
are some more advanced operations being used on the container such as &lt;code class=&quot;language-text&quot;&gt;chain&lt;/code&gt;
and if you have checked out the linked resources you will be familiar with
what all these operators do&lt;sup&gt;4&lt;/sup&gt;. This time our output looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{ _tag: &amp;#39;Left&amp;#39;,
  left:
   &amp;#39;Our final result, You got burned! &amp;lt;and&amp;gt; Try to unlock the resource but we failed&amp;#39; }&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully this discussion has piqued your interest for digging deeper into
how we might better handle errors in our code. There are, of course,
different theses about using abstract data types to handle values in this
way&lt;sup&gt;4&lt;/sup&gt;. For now, thanks for reading!&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/MostlyAdequate/mostly-adequate-guide&quot;&gt;Mostly adequate guide&lt;/a&gt; does an excellent
job of getting hands on with Monads and I would highly recommend checking it out.&lt;/li&gt;
&lt;li&gt;See the &lt;a href=&quot;https://github.com/fantasyland/fantasy-land#fantasy-land-specification&quot;&gt;fantasy land specification&lt;/a&gt;
for where Monads fit in with other general data types. &lt;code class=&quot;language-text&quot;&gt;Maybe&lt;/code&gt; is a similar instance to &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt; but it uses different tags.&lt;/li&gt;
&lt;li&gt;fp-ts already has an implementation of &lt;code class=&quot;language-text&quot;&gt;jsonParse&lt;/code&gt; called &lt;code class=&quot;language-text&quot;&gt;parseJson&lt;/code&gt;, but I decided to implement one as
it is a nice simple case for getting started.&lt;/li&gt;
&lt;li&gt;I would challenge the reader to create handler called &lt;code class=&quot;language-text&quot;&gt;always&lt;/code&gt; that takes a left or a right and runs the same
function&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/YR5WdGrpoug&quot;&gt;This talk&lt;/a&gt; by Rich Hickey is quite a famous one that contains a lot of wisdom regarding some of the pitfalls of
abstract data types.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Errors]]></title><description><![CDATA[Program errors are intended to express unexpected events during the carrying out of a set of instructions.
An unexpected event may sound‚Ä¶]]></description><link>https://jloleysens.github.io//code/errors/</link><guid isPermaLink="false">https://jloleysens.github.io//code/errors/</guid><pubDate>Sat, 21 Mar 2020 13:40:10 GMT</pubDate><content:encoded>&lt;br/&gt;
&lt;p&gt;Program errors are intended to express unexpected events during the carrying out of a set of instructions.
An &lt;em&gt;unexpected event&lt;/em&gt; may sound like a rare, special occurrence that requires extraordinary measures, but
in programming errors are far from rare and, as I hope to argue, should also be as far from special
as possible.&lt;/p&gt;
&lt;p&gt;To a computer, at the lowest level, an instruction could be take these binary values (inputs), perform a
logical operation, and generate a new binary value (output). In this idealised model there is not really
much unexpected that could happen ‚Äî other than the power socket being yanked out. However, this level
of instruction is not under consideration for day to day programming. It is too low level. Advances in
the field of hardware and software have enable programmers to combine over hundreds of thousands of these
lower level instructions. We have created and &lt;em&gt;layered&lt;/em&gt; concepts over &lt;em&gt;patterns&lt;/em&gt; which has lead to an onion-like model
of layers upon layers. This pattern itself is called &lt;em&gt;abstraction&lt;/em&gt; and is a very powerful idea in Computer Science.
Travelling up from the lowest layer of the onion we arrive at the text we read and write. Let‚Äôs call this
the &lt;em&gt;text representation&lt;/em&gt; of our program. It is one description of the program, and it happens to be the
one that programmers interact with most, so also where our creative problem solving efforts are
implemented for the problem we are (hopefully) solving.&lt;/p&gt;
&lt;p&gt;Where does this leave errors? Sometimes wedged between the edges of the layers of abstraction ‚Äî a message
to a lower level lost in translation or misinterpreted. This class of error can either be very simple to fix,
just use the expected method for passing a message down, or it can be deadly serious, in which case our
&lt;em&gt;text representation&lt;/em&gt; is on very shaky ground&lt;sup&gt;1&lt;/sup&gt;. A far more common class of unexpected events
arises from the combination of statefulness, our &lt;em&gt;text representation&lt;/em&gt; and cognitive limitations. I don‚Äôt
want to belabour the point of &lt;em&gt;how&lt;/em&gt; these errors arise, others have done a far better job of this than
I could hope to&lt;sup&gt;2&lt;/sup&gt;. What I would like to discuss is the role of errors themselves in the context
of our programs and specifically, the control-flow of our programs.&lt;/p&gt;
&lt;p&gt;We started by stating that errors are intended to &lt;em&gt;express&lt;/em&gt; an unexpected event. The question is, at whom
is the &lt;em&gt;expression&lt;/em&gt; aimed? Typically other humans, or if you have spent enough time programming you will have
run into errors of your own making. Let‚Äôs consider this JavaScript &lt;code class=&quot;language-text&quot;&gt;TypeError&lt;/code&gt; error:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run in the browser the above program generates the following output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Uncaught TypeError: a.b is not a function
    at &amp;lt;anonymous&amp;gt;:1:3&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the time of writing, &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; is not the name of a method that exists on the JavaScript number object and so
calling it get us into an error condition. This indicates something else too; errors exist only at runtime&lt;sup&gt;3&lt;/sup&gt;.
At &lt;em&gt;runtime&lt;/em&gt; practically means that for all the different environments and states that your program may
run in, possible error conditions will only reveal themselves at the latest possible moment, long
after you, and your colleagues, have considered the code complete and correct. This means, end users are
often the ones who read the contents of error messages. Consider also the contents in this case &lt;code class=&quot;language-text&quot;&gt;TypeError: a.b is not a function&lt;/code&gt;.
In this instance, the fix for this error is clear, just don‚Äôt call a non-existent function! But this toy example is a far cry from a program doing something
useful (and usually non-trivial and &lt;em&gt;stateful&lt;/em&gt;). The final thing to notice is that &lt;em&gt;errors impact control flow&lt;/em&gt;. The log
statement is &lt;em&gt;never&lt;/em&gt; reached ‚Äî you can run this program until the heat death of the universe and the
statement ‚Äúwe never get here‚Äù will never be output to the browser console.&lt;/p&gt;
&lt;p&gt;One response to this scary world of errors at runtime is using built-in error containment mechanisms. In
JavaScript this may look like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;but we do get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this program greets us with:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;but we do get here&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Control flow, once again, is impacted, but something else has happened too. The description of the error has
vanished ‚Äî hiding errors is probably worse than not handling them! Even if we were to write more code for extracting information from the &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; variable created in the
&lt;code class=&quot;language-text&quot;&gt;catch&lt;/code&gt; clause what we are we left with, at worst, is just the same description of &lt;code class=&quot;language-text&quot;&gt;Uncaught TypeError: a.b is not a function&lt;/code&gt;.
Given the number of text combinations that could express an error it is not feasible to build a self-healing
program by just analyzing text descriptions of errors. There is one more avenue open to us: we can detect
that &lt;em&gt;type&lt;/em&gt; of the error, in this case: &lt;code class=&quot;language-text&quot;&gt;TypeError&lt;/code&gt;. Altering our program again, we wind up with the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;but we do get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;also, we get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have a way to surface clearer messages to our users, our colleagues and our future selves! Additionally,
this approach lends itself very well to an inheritance model of errors. As it happens, &lt;code class=&quot;language-text&quot;&gt;TypeError&lt;/code&gt; is also an instance
of &lt;code class=&quot;language-text&quot;&gt;Error&lt;/code&gt;, so &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; would test true for both of those. An analogous approach exists in other programming languages.
This seems to bring a us a long way. By simply extending the built in &lt;code class=&quot;language-text&quot;&gt;Error&lt;/code&gt; class we can create our own
special family of sub-classes of errors. Problem solved!&lt;/p&gt;
&lt;p&gt;However we never asked whether passing error messages using an inheritance model was appropriate. Consider again
the opening statement, if errors are meant to express an unexpected event, is it useful to know that this
error instance is also an instance of a parent &lt;em&gt;type&lt;/em&gt; of error? How many levels of inheritance do we realistically
need? This added mechanism of extension also creates an explosion of code if we are serious about thoroughly
handling &lt;em&gt;all&lt;/em&gt; of the different error cases in our code. Bringing errors closer to a model of messaging passing
will aid us in keeping things simple while still being able to effectively express the nature of an unexpected
event. Consider this alteration:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Simple, generic error management machinery&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I_TRIED_THAT_B_THING_AGAIN_ERROR&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I_TRIED_THAT_B_THING_AGAIN_ERROR&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;errorCreatorFactory&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* Here we could add more error data */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; createSpecificError &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errorCreatorFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;I_TRIED_THAT_B_THING_AGAIN_ERROR&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;but we do get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;also, we get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createSpecificError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are still using an &lt;code class=&quot;language-text&quot;&gt;instanceof&lt;/code&gt; check in combination with information we think is useful for other humans
that may trigger this case. This gives us economy in the machinery we use, we only need to document very
specific, unique error codes and we are much closer to building a system of error handling that can generate
more helpful information. But we can do better still ‚Äî I intend to discuss &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt;&lt;sup&gt;4&lt;/sup&gt; in a following
post.&lt;/p&gt;
&lt;p&gt;To conclude, The best possible scenario I could imagine is one in which lower level errors are all handled and converted
into something humans can easily interpret and take appropriate action on. This proposition fits better with the mental
model of message passing than it does special events or extraordinary measures. The more ‚Äúnormal‚Äù we make
errors in the domain of programming the more naturally they can form part of our initial considerations&lt;sup&gt;5&lt;/sup&gt;.
Do not shy away from thinking about conceivable error states, and then do not shy away from confronting
error states you may not be able to conceive of given current information.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;This can also be considered the price of abstraction, because we are far removed from what is &lt;em&gt;actually&lt;/em&gt;
happening, if any layer below is unreliable, we are unreliable.&lt;/li&gt;
&lt;li&gt;For instance &lt;a href=&quot;http://curtclifton.net/papers/MoseleyMarks06a.pdf&quot;&gt;Out of the Tarpit&lt;/a&gt; is a fantastic article
on the pitfalls of carelessly managing state.&lt;/li&gt;
&lt;li&gt;Other, compiled, languages would never have generated a program that would allow an error like this, but
I am putting this consideration aside because they can still allow analogous errors to occur; albeit
hidden amidst a lot more text usually.&lt;/li&gt;
&lt;li&gt;Consider checking out &lt;a href=&quot;https://gcanti.github.io/fp-ts/&quot;&gt;fp-ts&lt;/a&gt; ‚Äî very cool TypeScript implementations of common abstract data structures.&lt;/li&gt;
&lt;li&gt;Monads are one response to forcing us to engage with the possibility that many parts of our program can
create ‚Äúunexpected‚Äù results.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Elastic and Zdog]]></title><description><![CDATA[(drag the logo)]]></description><link>https://jloleysens.github.io//code/elastic-and-zdog/</link><guid isPermaLink="false">https://jloleysens.github.io//code/elastic-and-zdog/</guid><pubDate>Mon, 19 Aug 2019 04:40:35 GMT</pubDate><content:encoded>&lt;h5&gt;(drag the logo)&lt;/h5&gt;
&lt;div style=&quot;height: 400px; width: 400px; margin: 0 auto;&quot;&gt;
  &lt;iframe style=&quot;height: 100%; width: 100%;&quot; scrolling=&quot;no&quot; frameBorder=&quot;0&quot; src=&quot;../../htmls/zdog-elastic-logo.html&quot;&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[On The Chariot]]></title><description><![CDATA[*Tana-ta-tana-ta-tana-ta-tana-ta**Tana-ta-tana-ta-tana-ta-tana-ta*This is the last chance you get‚Ä¶ Open wide!‚Äî The ChariotFor many people‚Ä¶]]></description><link>https://jloleysens.github.io//music/the-chariot/</link><guid isPermaLink="false">https://jloleysens.github.io//music/the-chariot/</guid><pubDate>Sun, 19 May 2019 13:50:43 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;*Tana-ta-tana-ta-tana-ta-tana-ta*&lt;/p&gt;
&lt;p&gt;*Tana-ta-tana-ta-tana-ta-tana-ta*&lt;/p&gt;
&lt;p&gt;This is the last chance you get‚Ä¶ Open wide!&lt;/p&gt;
&lt;p&gt;‚Äî &lt;cite&gt;The Chariot&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For many people who are familiar with &lt;em&gt;The Chariot&lt;/em&gt; this refrain should stand
out as an iconic overture on the track &lt;em&gt;Back to Back&lt;/em&gt; from the album &lt;em&gt;The
Fianc√©e&lt;/em&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=OpyhEKlQqZw&quot;&gt;music video here&lt;/a&gt;.
The moments which follow are a visceral, jarring assault on your senses.
Well, your sense of hearing to be more precise. Most to whom I‚Äôve played
this, or other &lt;em&gt;Chariot&lt;/em&gt; tracks, have generally responded with a strong
aversion, disgust or incredulity that music like this exists. More
interestingly, this response is present regardless of whether the person in
question listens to broader categories of alternative music (e.g., heavy metal) or not.
I find these responses totally understandable ‚Äî perhaps even a
desired outcome. It‚Äôs just a cacophony. And an especially obnoxious cacophony
at that&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of your initial response, I‚Äôd like to invite you to consider
my case; that &lt;em&gt;The Chariot&lt;/em&gt; presents unique art, painstakingly and
lovingly crafted with an incisive message for modernity. &lt;em&gt;The Chariot&lt;/em&gt;
unpacks an interpretation of our modern milieu that is as shrewed as the
music is unhinged ‚Äî which is worth taking stock of. I submit to you
this post as my brief post-mortem review on &lt;em&gt;The Chariot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Without delving to deeply into the origins and interlinked nature of music
genres it is worth noting that &lt;em&gt;The Chariot&lt;/em&gt;‚Äôs roots are in punk rock.
Telltale signs being present in song brevity, aggressiveness, minimalistic use
of chords (at times) and charged lyrical content. Math Rock (syncopated,
irregular rhythm sections) combined with punk roots create a hardcore sound
also present in bands like &lt;em&gt;Norma Jean&lt;/em&gt; and, more along the Math Rock
tangent, bands like &lt;em&gt;The Dillinger Escape Plan&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I first heard &lt;em&gt;The Chariot&lt;/em&gt;‚Äôs music when I was in eleventh grade, back in 2009.
Their album &lt;em&gt;Wars and Rumours of Wars&lt;/em&gt; had recently been released and a
friend of mine played the track ‚ÄúDaggers‚Äù to me. At the time the accompanying
&lt;a href=&quot;https://www.youtube.com/watch?v=K05weZYExPU&quot;&gt;music video&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;
demonstrated that this band is not a typical group ‚Äî they had something to
say. The insignificant cartoon army-men being dropped into the midst of war
with the sun happily(?) shining down on them depicts the way in which human life
is undervalued by proud detached leaders. This particular song is clearly a protest against the powers that be with the repeated
phrase: ‚ÄúWar, it‚Äôs only skin deep‚Äù. Like many bands in the genre they sounded
really angry, but about what?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Chariot&lt;/em&gt;‚Äôs first album &lt;em&gt;Everything Is Alive, Everything Is Breathing,
Nothing Is Dead, and Nothing Is Bleeding&lt;/em&gt; is even a challenge to the
convention of album titles (at the time). By the time they released
&lt;em&gt;One Wing&lt;/em&gt; the music and presentation were honed to a razor sharp edge. With
tracks ‚ÄúIn‚Äù seasoned with
aphorisms: ‚ÄúWe‚Äôre all capable of love, we‚Äôre all capable of cancer‚Äù and
‚ÄúLove.‚Äú‚Äòs (one of all my all time favorites) lyrics ‚ÄúYou fell in love [with the world], you fell
asleep‚Äù. These lines reveal a theme: a reclamation of what was lost and
supremacy of individual decision-making while affirming the accompanying responsibility that come
with our decision-making powers ‚Äî all delivered in a tongue-in-cheek manner.&lt;/p&gt;
&lt;p&gt;The band‚Äôs primary driver and creative force Josh Scogin went through several
line up changes. He nurtured and maintained the band‚Äôs vision. Scogin is a
self-proclaimed adherent to the Christian faith and his lyrics contain many
references to Paul and Christ. However, in keeping with the nature of art,
Christianity is not a prerequisite for resonating with lyrics like ‚ÄúWe hold
our breath as we pass everyone sleeping‚Ä¶‚Äù which occur in a meadow-like
dream section of the track ‚ÄúTongues‚Äù. This section speaks out as a call for
action in the presence of overwhelming inaction, presumably apathy. As an
overall body of art &lt;em&gt;The Chariot&lt;/em&gt; is a Nietzschean grip around the shoulders
and call for an honest evaluation of one‚Äôs life and surroundings with
motivation to consequent action.&lt;/p&gt;
&lt;p&gt;One gets the sense that this of music seeks to undo the confidence with which
humankind establishes and venerates it‚Äôs ideologies as superior and correct -
to me this is particularly true of the West‚Äôs cultural pattern. &lt;em&gt;The Chariot&lt;/em&gt;‚Äôs
music warns against the dangers of oversimplification and tends to
depict humanity grasping at straws, endlessly seeking for unifying theories
but only discovering paradox leading to deepening anxieties, unless we can
somehow awaken to our place in the world (whatever that may be).&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;I have seen exceptions to this rule, individuals with whom The Chariot resonate off the bat. Emphasis here on &lt;em&gt;exception&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The music video for ‚ÄúDaggers‚Äù may contain the first &lt;a href=&quot;https://www.youtube.com/watch?v=K05weZYExPU&amp;#x26;start=75&quot;&gt;instance of dabbing&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>