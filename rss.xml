<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[JλO]]></title><description><![CDATA[Mah blog]]></description><link>https://gatsby-starter-blog-demo.netlify.com/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 21 Mar 2020 13:29:19 GMT</lastBuildDate><item><title><![CDATA[Errors]]></title><description><![CDATA[Program errors are intended to express unexpected events during the carrying out of a set of instructions.
An unexpected event may sound…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//errors/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//errors/</guid><content:encoded>&lt;br/&gt;
&lt;p&gt;Program errors are intended to express unexpected events during the carrying out of a set of instructions.
An &lt;em&gt;unexpected event&lt;/em&gt; may sound like a rare special occurrence that requires extraordinary measures, but
in programming errors are far from rare and, as I hope to argue, should also be as far from special
as possible.&lt;/p&gt;
&lt;p&gt;To a computer, at the lowest level, an instruction could be take these binary values (inputs), perform a
logical operation, and generate a new binary value (output). In this idealised model there is not really
much unexpected that could happen — other than the power socket being yanked out. However, this level
of instruction is not under consideration for day to day programming. It is too low level. Advances in
the field of hardware and software have enable programmers to combine over hundreds of thousands of these
lower level instructions. We have created and &lt;em&gt;layered&lt;/em&gt; concepts over &lt;em&gt;patterns&lt;/em&gt; which has lead to an onion-like model
of layers upon layers. This pattern itself is called &lt;em&gt;abstraction&lt;/em&gt; and is a very powerful idea in Computer Science.
Travelling up from the lowest layer of the onion we arrive at the text we read and write. Let’s call this
the &lt;em&gt;text representation&lt;/em&gt; of our program. It is one description of the program, and it happens to the be
one that programmers interact with the most, so also where our creative problem solving efforts are
implemented for the problem we are (hopefully) solving.&lt;/p&gt;
&lt;p&gt;Where does this leave errors? Sometimes wedged between the edges of the layers of abstraction — a message
to a lower level lost in translation or misinterpreted. This class of error can either be very simple to fix,
just use the expected method for passing a message down, or it can be deadly serious, in which case our
&lt;em&gt;text representation&lt;/em&gt; is on very shaky ground&lt;sup&gt;1&lt;/sup&gt;. A far more common class of unexpected events
arises from the combination of statefulness, our &lt;em&gt;text representation&lt;/em&gt; and cognitive limitations. I don’t
want to belabour the point of &lt;em&gt;how&lt;/em&gt; these errors arise, others have done a far better job of this than
I could hope to&lt;sup&gt;2&lt;/sup&gt;. What I would like to discuss is the role of errors themselves in the context
of our programs and specifically, the control-flow of our programs.&lt;/p&gt;
&lt;p&gt;We started by stating that errors are intended to &lt;em&gt;express&lt;/em&gt; an unexpected event. The question is, at whom
is the &lt;em&gt;expression&lt;/em&gt; aimed? Typically other humans, or if you have spent enough time programming you will have
run into errors of your own making. Let’s consider this JavaScript &lt;code class=&quot;language-text&quot;&gt;TypeError&lt;/code&gt; error:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run in the browser the above program generates the following output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Uncaught TypeError: a.b is not a function
    at &amp;lt;anonymous&amp;gt;:1:3&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the time of writing, &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; is not the name of a method that exists on the JavaScript number object and so
calling it get us into an error condition. This indicates something else too; errors exist only at runtime&lt;sup&gt;3&lt;/sup&gt;.
At &lt;em&gt;runtime&lt;/em&gt; practically means that for all the different environments and states that your program may
run in, possible error conditions will only reveal themselves at the latest possible moment, long
after you, and your colleagues, have considered the code complete and correct. This means, end users are
often the ones who read the contents of error messages. Consider also the contents in this case &lt;code class=&quot;language-text&quot;&gt;TypeError: a.b is not a function&lt;/code&gt;.
In this instance, the fix for this error is clear, just don’t call a non-existent function! But this toy example is a far cry from a program doing something
useful (and usually non-trivial and &lt;em&gt;stateful&lt;/em&gt;). The final thing to notice is that &lt;em&gt;errors impact control flow&lt;/em&gt;. The log
statement is &lt;em&gt;never&lt;/em&gt; reached — you can run this program until the heat death of the universe and the
statement “we never get here” will never be output to the browser console.&lt;/p&gt;
&lt;p&gt;One response to this scary world of errors at runtime is using built-in error containment mechanisms. In
JavaScript this may look like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;but we do get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this program greets us with:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;but we do get here&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Control flow, once again, is impacted, but something else has happened too. The description of the error has
vanished — hiding errors is probably worse than not handling them! Even if we were to write more code for extracting information from the &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; variable created in the
&lt;code class=&quot;language-text&quot;&gt;catch&lt;/code&gt; clause what we are we left with, at worst, is just the same description of &lt;code class=&quot;language-text&quot;&gt;Uncaught TypeError: a.b is not a function&lt;/code&gt;.
Given the number of text combinations that could express an error it is not feasible to build a self-healing
program by just analyzing text descriptions of errors. There is one more avenue open to us: we can detect
that &lt;em&gt;type&lt;/em&gt; of the error, in this case: &lt;code class=&quot;language-text&quot;&gt;TypeError&lt;/code&gt;. Altering our program again, we wind up with the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;but we do get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;also, we get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have a way to surface clearer messages to our users, our colleagues and our future selves! Additionally,
this approach lends itself very well to an inheritance model of errors. As it happens, &lt;code class=&quot;language-text&quot;&gt;TypeError&lt;/code&gt; is also an instance
of &lt;code class=&quot;language-text&quot;&gt;Error&lt;/code&gt;, so &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; would test true for both of those. An analogous approach exists in other programming languages.
This seems to bring a us a long way. By simply extending the built in &lt;code class=&quot;language-text&quot;&gt;Error&lt;/code&gt; class we can create our own
special family of sub-classes of errors. Problem solved!&lt;/p&gt;
&lt;p&gt;However we never asked whether passing error messages using an inheritance model was appropriate. Consider again
the opening statement, if errors are meant to express an unexpected event, is it useful to know that this
error instance is also an instance of a parent &lt;em&gt;type&lt;/em&gt; of error? How many levels of inheritance do we realistically
need? This added mechanism of extension also creates an explosion of code if we are serious about thoroughly
handling &lt;em&gt;all&lt;/em&gt; of the different error cases in our code. Bringing errors closer to a model of messaging passing
will aid us in keeping things simple while still being able to effectively express the nature of an unexpected
event. Consider this alteration:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Simple, generic error management machinery&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SPECIFIC_ERROR&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;SPECIFIC_ERROR&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;errorCreator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; createSpecificError &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errorCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SPECIFIC_ERROR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;we never get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;but we do get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;also, we get here&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createSpecificError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are still using an &lt;code class=&quot;language-text&quot;&gt;instanceof&lt;/code&gt; check in combination with information we think is useful for other humans
that may trigger this case. This gives us economy in the machinery we use, we only need to document very
specific, unique error codes and we are much closer to building a system of error handling that can generate
more helpful information. But we can do better still — I intend to discuss &lt;code class=&quot;language-text&quot;&gt;Either&lt;/code&gt;&lt;sup&gt;5&lt;/sup&gt; in a following
post.&lt;/p&gt;
&lt;p&gt;To conclude, The best possible scenario I could imagine is one in which lower level errors are all handled and converted
into something humans can easily interpret and take appropriate action on. This proposition fits better with the mental
model of message passing than it does special events or extraordinary measures. The more “normal” we make
errors in the domain of programming the more naturally they can form part of our initial considerations&lt;sup&gt;5&lt;/sup&gt;.
Do not shy away from thinking about conceivable error states, and then do not shy away from confronting
error states you may not be able to conceive of given current information.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;This can also be considered the price of abstraction, because we are far removed from what is &lt;em&gt;actually&lt;/em&gt;
happening, if any layer below is unreliable, we are unreliable.&lt;/li&gt;
&lt;li&gt;For instance &lt;a href=&quot;http://curtclifton.net/papers/MoseleyMarks06a.pdf&quot;&gt;Out of the Tarpit&lt;/a&gt; is a fantastic article
on the pitfalls of carelessly managing state.&lt;/li&gt;
&lt;li&gt;Other, compiled languages, would never have generated a program that would allow an error like this, but
I am putting this consideration aside because they can still allow analogous errors to occur; albeit
hidden amidst a lot more text usually.&lt;/li&gt;
&lt;li&gt;Consider checking out &lt;a href=&quot;https://gcanti.github.io/fp-ts/&quot;&gt;fp-ts&lt;/a&gt; very cool TypeScript implementations of common abstract data structures.&lt;/li&gt;
&lt;li&gt;Monads are one response to forcing us to engage with the possibility that many parts of our program can
create “unexpected” results.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Elastic and Zdog]]></title><description><![CDATA[(drag the logo （　ﾟДﾟ） )]]></description><link>https://gatsby-starter-blog-demo.netlify.com//elastic-and-zdog/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//elastic-and-zdog/</guid><pubDate>Mon, 19 Aug 2019 04:40:35 GMT</pubDate><content:encoded>&lt;h5&gt;(drag the logo （　ﾟДﾟ） )&lt;/h5&gt;
&lt;div style=&quot;height: 400px; width: 400px; margin: 0 auto;&quot;&gt;
  &lt;iframe style=&quot;height: 100%; width: 100%;&quot; scrolling=&quot;no&quot; frameBorder=&quot;0&quot; src=&quot;../zdog-elastic-logo.html&quot;&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[On The Chariot]]></title><description><![CDATA[*Tana-ta-tana-ta-tana-ta-tana-ta**Tana-ta-tana-ta-tana-ta-tana-ta*This is the last chance you get… Open wide!— The ChariotFor many people…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//the-chariot/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//the-chariot/</guid><pubDate>Sun, 19 May 2019 13:50:43 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;*Tana-ta-tana-ta-tana-ta-tana-ta*&lt;/p&gt;
&lt;p&gt;*Tana-ta-tana-ta-tana-ta-tana-ta*&lt;/p&gt;
&lt;p&gt;This is the last chance you get… Open wide!&lt;/p&gt;
&lt;p&gt;— &lt;cite&gt;The Chariot&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For many people who are familiar with &lt;em&gt;The Chariot&lt;/em&gt; this refrain should stand
out as an iconic overture on the track &lt;em&gt;Back to Back&lt;/em&gt; from the album &lt;em&gt;The
Fiancée&lt;/em&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=OpyhEKlQqZw&quot;&gt;music video here&lt;/a&gt;.
The moments which follow are a visceral, jarring assault on your senses.
Well, your sense of hearing to be more precise. Most to whom I’ve played
this, or other &lt;em&gt;Chariot&lt;/em&gt; tracks, have generally responded with a strong
aversion, disgust or incredulity that music like this exists. More
interestingly, this response is present regardless of whether the person in
question listens to broader categories of alternative music (e.g., heavy metal) or not.
I find these responses totally understandable — perhaps even a
desired outcome. It’s just a cacophony. And an especially obnoxious cacophony
at that&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of your initial response, I’d like to invite you to consider
my case; that &lt;em&gt;The Chariot&lt;/em&gt; presents unique art, painstakingly and
lovingly crafted with an incisive message for modernity. &lt;em&gt;The Chariot&lt;/em&gt;
unpacks an interpretation of our modern milieu that is as shrewed as the
music is unhinged — which is worth taking stock of. I submit to you
this post as my brief post-mortem review on &lt;em&gt;The Chariot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Without delving to deeply into the origins and interlinked nature of music
genres it is worth noting that &lt;em&gt;The Chariot&lt;/em&gt;’s roots are in punk rock.
Telltale signs being present in song brevity, aggressiveness, minimalistic use
of chords (at times) and charged lyrical content. Math Rock (syncopated,
irregular rhythm sections) combined with punk roots create a hardcore sound
also present in bands like &lt;em&gt;Norma Jean&lt;/em&gt; and, more along the Math Rock
tangent, bands like &lt;em&gt;The Dillinger Escape Plan&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I first heard &lt;em&gt;The Chariot&lt;/em&gt;’s music when I was in eleventh grade, back in 2009.
Their album &lt;em&gt;Wars and Rumours of Wars&lt;/em&gt; had recently been released and a
friend of mine played the track “Daggers” to me. At the time the accompanying
&lt;a href=&quot;https://www.youtube.com/watch?v=K05weZYExPU&quot;&gt;music video&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;
demonstrated that this band is not a typical group — they had something to
say. The insignificant cartoon army-men being dropped into the midst of war
with the sun happily(?) shining down on them depicts the way in which human life
is undervalued by proud detached leaders. This particular song is clearly a protest against the powers that be with the repeated
phrase: “War, it’s only skin deep”. Like many bands in the genre they sounded
really angry, but about what?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Chariot&lt;/em&gt;’s first album &lt;em&gt;Everything Is Alive, Everything Is Breathing,
Nothing Is Dead, and Nothing Is Bleeding&lt;/em&gt; is even a challenge to the
convention of album titles (at the time). By the time they released
&lt;em&gt;One Wing&lt;/em&gt; the music and presentation were honed to a razor sharp edge. With
tracks “In” seasoned with
aphorisms: “We’re all capable of love, we’re all capable of cancer” and
“Love.“‘s (one of all my all time favorites) lyrics “You fell in love [with the world], you fell
asleep”. These lines reveal a theme: a reclamation of what was lost and
supremacy of individual decision-making while affirming the accompanying responsibility that come
with our decision-making powers — all delivered in a tongue-and-cheek manner.&lt;/p&gt;
&lt;p&gt;The band’s primary driver and creative force Josh Scogin went through several
line up changes. He nurtured and maintained the band’s vision. Scogin is a
self-proclaimed adherent to the Christian faith and his lyrics contain many
references to Paul and Christ. However, in keeping with the nature of art,
Christianity is not a prerequisite for resonating with lyrics like “We hold
our breath as we pass everyone sleeping…” which occur in a meadow-like
dream section of the track “Tongues”. This section speaks out as a call for
action in the presence of overwhelming inaction, presumably apathy. As an
overall body of art &lt;em&gt;The Chariot&lt;/em&gt; is a Nietzschean grip around the shoulders
and call for an honest evaluation of one’s life and surroundings with
motivation to consequent action.&lt;/p&gt;
&lt;p&gt;One gets the sense that this of music seeks to undo the confidence with which
humankind establishes and venerates it’s ideologies as superior and correct -
to me this is particularly true of the West’s cultural pattern. &lt;em&gt;The Chariot&lt;/em&gt;’s
music warns against the dangers of oversimplification and tends to
depict humanity grasping at straws, endlessly seeking for unifying theories
but only discovering paradox leading to deepening anxieties, unless we can
somehow awaken to our place in the world (whatever that may be).&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;I have seen exceptions to this rule, individuals with whom The Chariot resonate off the bat. Emphasis here on &lt;em&gt;exception&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The music video for “Daggers” may contain the first &lt;a href=&quot;https://www.youtube.com/watch?v=K05weZYExPU&amp;#x26;start=75&quot;&gt;instance of dabbing&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>