{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"74e46fc3-fe38-5bf2-889e-ee5e61ee9fda","excerpt":"Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nAn unexpected event may sound like a rare special…","html":"<br/>\n<p>Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nAn <em>unexpected event</em> may sound like a rare special occurrence that requires extraordinary measures, but\nin programming errors are far from rare and, as I hope to argue, should also be as far from special\nas possible.</p>\n<p>To a computer, at the lowest level, an instruction could be take these binary values (inputs), perform a\nlogical operation, and generate a new binary value (output). In this idealised model there is not really\nmuch unexpected that could happen — other than the power socket being yanked out. However, this level\nof instruction is not under consideration for day to day programming. It is too low level. Advances in\nthe field of hardware and software have enable programmers to combine over hundreds of thousands of these\nlower level instructions. We have created and <em>layered</em> concepts over <em>patterns</em> which has lead to an onion-like model\nof layers upon layers. This pattern itself is called <em>abstraction</em> and is a very powerful idea in Computer Science.\nTravelling up from the lowest layer of the onion we arrive at the text we read and write. Let’s call this\nthe <em>text representation</em> of our program. It is one description of the program, and it happens to the be\none that programmers interact with the most, so also where our creative problem solving efforts are\nimplemented for the problem we are (hopefully) solving.</p>\n<p>Where does this leave errors? Sometimes wedged between the edges of the layers of abstraction — a message\nto a lower level lost in translation or misinterpreted. This class of error can either be very simple to fix,\njust use the expected method for passing a message down, or it can be deadly serious, in which case our\n<em>text representation</em> is on very shaky ground<sup>1</sup>. A far more common class of unexpected events\narises from the combination of statefulness, our <em>text representation</em> and cognitive limitations. I don’t\nwant to belabour the point of <em>how</em> these errors arise, others have done a far better job of this than\nI could hope to<sup>2</sup>. What I would like to discuss is the role of errors themselves in the context\nof our programs and specifically, the control-flow of our programs.</p>\n<p>Shifting gears from the broader discussion, we started by stating that errors are intended to <em>express</em>\nan unexpected event. The question is, at whom is the <em>expression</em> aimed? Typically other humans, or\nif you have spent enough time programming you will have run into errors of your own making. Let’s\nconsider this JavaScript <code class=\"language-text\">TypeError</code> error:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nUncaught TypeError<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>b is not a <span class=\"token keyword\">function</span>\n    at <span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>At the time of writing, <code class=\"language-text\">b</code> is not the name of standard method that exists on a number object. This\nindicates something else, errors exist only at runtime. Other, compiled languages, would never have generated\na program that would allow an error like this, but let us put that consideration aside.</p>\n<h3>Notes</h3>\n<ol>\n<li>This can also be considered the price of abstraction, because we are far removed from what is <em>actually</em>\nhappening, if any layer below is unreliable, we are unreliable.</li>\n<li>For instance <a href=\"http://curtclifton.net/papers/MoseleyMarks06a.pdf\">Out of the Tarpit</a> is a fantastic article\non the pitfalls of carelessly managing state.</li>\n</ol>","frontmatter":{"title":"Errors","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/errors/","previous":{"fields":{"slug":"/elastic-and-zdog/"},"frontmatter":{"title":"Elastic and Zdog"}},"next":null}}