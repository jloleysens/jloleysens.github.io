{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"c8b41213-0e32-5d96-9001-de15cd4d56f7","excerpt":"I have recently quite enjoyed the use of TODO comments. On one hand, there is\nsomething really off-putting about having TODOs littered across your code\nbase…","html":"<p>I have recently quite enjoyed the use of TODO comments. On one hand, there is\nsomething really off-putting about having TODOs littered across your code\nbase. Like threads of thought that did not have time to fully develop and are\nnow dangling appendages of what could have been if only someone had finished\nthe job at time, but for whatever reason could not.</p>\n<p>At their worst TODOs are certainly things that I would avoid placing in code.\nYour collaborators (or your future self) will come across them lacking the\ncontext of your train of thought. In this way a TODO comment will seem like a\ncompromise (a trade-off for work unfinished) that was made without a clear\nrationale. Usually a standard comment is more appropriate and should be used\nliberally in cases where code may be in a state that is hard for new readers\nto understand.</p>\n<p>At their best TODOs are indicators of future work <em>placed right in the code\nitself</em>. It should be very clear to others (and your future self) what it is\nthat is yet to be done here; the surrounding code <em>is</em> your context. It could\nbe a brief description of an improvement or a simple indicator that standard\nprotocol was skipped for the sake of brevity. “Ah”, they will say, “clearly a\nnew in-the-works component will replace this minimally viable one in future.\nI am not going to spend time on improvements here”. That would be an awesome\noutcome for a humble TODO comment. You have saved yourself and someone else\ntime by placing a clear marker in the code.</p>\n<p>Another excellent use of a TODO is when writing front-end code which often\ncalls for high quality copy that end users will read. In the early stages of\ndevelopment of a new feature it is not worth spending time on this because your\nwork is in a state of flux. Figuring out copy while making architecture\ndecisions is time ill-spent. A simple <code class=\"language-text\">TODO: translate</code> or <code class=\"language-text\">TODO: review copy</code> comment will save you the mental tax of worrying about a separate\nconcern when all you need is a button in the UI that says: “Do the thing”.\nThe TODO will be especially useful when, in future, someone returns to address\nthese TODOs and can search for a <em>consistent</em> convention. All translations\nmarked with <code class=\"language-text\">TODO: translate</code>, for instance.</p>\n<p>I have made written many unhelpful comments and TODOs in the past. These\nhave the spin-off of creating double or triple work:</p>\n<ol>\n<li>\n<p>When you return to re-read it and are not in the same flow</p>\n</li>\n<li>\n<p>When someone\nelse reads it and misinterprets it, contacting you to explain your gibberish</p>\n</li>\n<li>\n<p>When someone else reads it, thinks they understand, execute based on that\nand request your review in future; leaving you with the job of reviewing and\nre-explaining what you meant.</p>\n</li>\n</ol>\n<p>All of this actually goes to say; write comments as “context-free”. The surrounding\ncode may be all context that remains when you return. Also write executable TODOs.</p>","frontmatter":{"title":"TODO","date":"April 26, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/code/todo/","previous":{"fields":{"slug":"/code/either/"},"frontmatter":{"title":"Errors and Either"}},"next":null}}