{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"22ef3de9-4f3a-5331-a6a8-9bd6a5eb9833","excerpt":"Welcome to yet another post on the Internet about Monads! I am only mostly\nkidding. I do not intend to use this post as an introduction to\nMonads1. This post is…","html":"<br />\n<p>Welcome to yet another post on the Internet about Monads! I am only mostly\nkidding. I do not intend to use this post as an introduction to\nMonads<sup>1</sup>. This post is actually a continuation of <a href=\"../errors\">my post on\nerrors</a>, and I would like to dig into the practical upshots of\nimplementing more thorough and efficient means of handling errors.\nSpecifically I am picking up the sentiment that <em>we can do better</em>\nand measurably so.</p>\n<p>Consider the following diagram:</p>\n<figure class=\"my-figure\">\n  <a name=\"fig1\">\n    <img src=\"../../pics/either/myprogram1.png\" alt=\"My program figure 1\" title=\"My program figure 1\">\n  </a>\n  <figcaption>Figure 1</figcaption>\n</figure>\n<p>Figure 1 features elements of a typical program; a start point, branch\nconditions and terminus points. Real programs could be expressed as sets of\nthese diagrams linked together, one’s output the input of the next. Our\nbranching here is focused on errors. Each diamond is a point at which we take\nan action that <em>could</em> result in an error condition. The <code class=\"language-text\">s</code> branch indicates\na successful result where the <code class=\"language-text\">e</code> branch indicates an unsuccessful result.\nThis is the error <em>control flow</em> inherent in any program that could have\nerror conditions.</p>\n<p>The different terminus nodes indicate different end states that our program\ncan reach. Each end state indicates a different <em>type</em> of output. This toy program has\nfour different potential terminus states. We can imagine that if this program\ngrew to any level of complexity we would see an explosion of terminus states\nemerging as we introduce new points of error.</p>\n<p>Moreover, a terminus state represents the end of the programmers <em>intent</em>. It\nis saying “We have reached this point without generating the outcome we had\nhoped, so send a message back <em>expressing this unexpected event</em>“.</p>\n<p>Describing programming in this way may sound like an ungracious description\nof how many programs work, but practice is often not far off from this.\nConsider this JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unlockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingDangerous</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">'resource'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> locked <span class=\"token operator\">=</span> <span class=\"token function\">lockSomeResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">doSomethingDangerous</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This code is a representation of one of the diamonds in <a href=\"./#fig1\">Figure 1</a>.\nClearly we will reach the <code class=\"language-text\">e</code> branch. And log the error to the browser\nconsole. But consider what might happen if unlocking the resource is a known\npotential point of error too. To achieve our goal of improved error messages\nwe might make the following alterations:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unlockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nope!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingCoolButDangerous</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">resource</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> locked <span class=\"token operator\">=</span> <span class=\"token function\">lockSomeResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">doSomethingCoolButDangerous</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`something went wrong with locking the resource or doing something dangerous, either way: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`could not unlock the resource because: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myFunction1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The snippet above is a representation of a path in <a href=\"./#fig1\">Figure 1</a> where\nwe reach two, successive error conditions. Nested try-catch blocks may seem\nlike overkill but they are the only way to ensure that our error states are\nkept in check. We can continue to flesh out this example and perhaps refactor\nour code so that each potentially dangerous call is inside of it’s own\ntry-catch block, we may even be tempted to provide a more generic way of\nprovisioning these try-catch-finally blocks for functions (do this at your\nown peril!). The potential danger of swallowing errors is creating programs\nthat <em>do not correctly “break” when they should</em>. Another point to notice\nhere is that we have assumed <code class=\"language-text\">myFunction1</code> should return something to the\ncaller. Either it is the result of <code class=\"language-text\">doSomethingCoolButDangerous</code> or it is\n<code class=\"language-text\">undefined</code>\n— which is our implicit way of communicating that something went wrong,\nlet’s say we made this part of our contract to calling code. This is how a\nlot of programs operate. I would like to assert we can do better than this,\nand write less code with less nesting. Consider this revision to our graph:</p>\n<figure class=\"my-figure\">\n  <a name=\"fig2\">\n    <img src=\"../../pics/either/myprogram2.png\" alt=\"My program figure 2\" title=\"My program figure 2\">\n  </a>\n  <figcaption>Figure 2</figcaption>\n</figure>\n<p>In the figure above we have eliminated all terminus points but one. In some sense\nthe diamonds have been made <em>totally irrelevant</em> to the output of our\nprogram. I would like to demonstrate that this is what the <code class=\"language-text\">Either</code> monad\nwas made for. All paths lead to one output, no matter what happens. <code class=\"language-text\">Either</code> can be considered an abstract way\nof expressing uncertainty in our programs and so it is a very general data\ntype<sup>2</sup>. The way <code class=\"language-text\">Either</code> makes this possible is by placing the\nresult of our function inside of a <em>tagged container</em>. It is this tagging\nthat lets subsequent code know whether some went right or wrong, in <code class=\"language-text\">Either</code>\nterms; <em>left</em> or <em>right</em>. Left denotes a failure where right denotes a success.\nBy placing values inside of containers like this we are able to associate some\nmetadata with the a given output. Consider this example (in TypeScript):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unsafeJSONParse</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">unknownString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> object <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This function can easily represent one of the diamonds in our program where\nan unknown string value can be passed in and one of two things will happen:\nan error, or a newly minted object. Consider this revision with <code class=\"language-text\">Either</code> as\nimplemented by <a href=\"https://github.com/gcanti/fp-ts/blob/dcf0b105061c99ea6c82abba31800d544fb851d5/src/Either.ts#L64\">fp-ts</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> tryCatch<span class=\"token punctuation\">,</span> Either <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jsonParse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>unknownString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> object<span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>unknownString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> Error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is slightly more verbose for a start, but if we look at the return type\nwe are now returning an <code class=\"language-text\">Either</code><sup>3</sup>! This change is most important\nat a <code class=\"language-text\">type</code> level: we have now declared that <code class=\"language-text\">jsonParse</code> no longer produces\nan <code class=\"language-text\">object</code> but <code class=\"language-text\">Right&lt;object&gt;</code> <em>or</em> <code class=\"language-text\">Left&lt;string&gt;</code>. The <code class=\"language-text\">Right</code> <em>or</em> <code class=\"language-text\">Left</code>\nresult of this function is what enables us to eliminate other terminus\npoints. Furthermore we can now more generically handle control flow\nintroduced by errors. There is no need to ever have a nested try-catch block\nagain. Returning to our example from before, we can refactor like so (still\nusing fp-ts, though specific fp-ts knowledge is not required):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/pipeable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Either <span class=\"token comment\">/* &lt;- Type only */</span><span class=\"token punctuation\">,</span>\n  either<span class=\"token punctuation\">,</span>\n  left<span class=\"token punctuation\">,</span>\n  right<span class=\"token punctuation\">,</span>\n  isRight<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lockSomeResource <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  eitherR<span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span>eitherR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oops!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unlockSomeResource <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  eitherR<span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span>eitherR<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Try to unlock the resource but we failed'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something upstream failed, we do not have a resource to unlock'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doSomethingCoolButDangerous <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  eitherR<span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span>eitherR<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resource<span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">lockSomeResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    doSomethingCoolButDangerous<span class=\"token punctuation\">,</span>\n    unlockSomeResource\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myFunction1</span><span class=\"token punctuation\">(</span>either<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ok, that was an explosion of new code that looks very FP! You may be\nwondering how on earth this is an improvement over the nested try-catch and\nat this point it really is not. For instance, there seems to be more repeated\ncode, albeit not-nested. Also, what is this <code class=\"language-text\">either.of</code>? What is <code class=\"language-text\">pipe</code> even?\nI would challenge the reader to not dig too deeply into those concepts but\nrather to look at the body of <code class=\"language-text\">myFunction1</code>. What is being described there?\nTake a moment to think about what the result of calling\n<code class=\"language-text\">myFunction1(either.of(&#39;resource&#39;));</code> might be.</p>\n<br/>\n<br/>\n<p>Ok, it’s:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{ _tag: &#39;Left&#39;,\n  left:\n   &#39;Something upstream failed, we do not have a resource to unlock&#39; }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Trace through the code and consider how we arrived at <em>this</em> result.</p>\n<p>Consider that we still have a fairly imperative way of laying out\ninstructions. The primary change has been to separate steps into functions\nand we now have the <code class=\"language-text\">Either</code> machinery so we don’t deal with value directly.\nInstead, we are dealing with a <em>container</em> that has been <em>tagged</em> which\ncarries our value. In each of our functions we now accept <code class=\"language-text\">Either</code> and return\n<code class=\"language-text\">Either</code>. At a type level we have achieved the simplification of our graph —\none terminus — but at the cost of developer experience and ergonomics.\nSomeone once told me that don’t abstract something unless you have at least\nthree different instances of it, as a guiding rule. In the refactor above we\nare repeatedly checking our code for <code class=\"language-text\">isRight</code> and then taking some action\nbased on that. We are wrestling with control flow at a <em>lower level</em>. I would argue\nthat this is a very similar algorithm to what we had above, but each point of error\nhas been exposed!</p>\n<p>I have avoided interacting directly with the value inside of the container\nto show how the container itself is our signal for control flow through\nour program. However, it is cumbersome and we can certainly do\nbetter — fortunately others have already noticed this; consider a further\nrevision:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> either<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> bimap<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">,</span> tryCatch<span class=\"token punctuation\">,</span> fold <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> identity <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/pipeable'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lockSomeResource <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unlockSomeResource <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Try to unlock the resource but we failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doSomethingCoolButDangerous <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resource<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    either<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>lockSomeResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">doSomethingCoolButDangerous</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> Error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">,</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">bimap</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">,</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Our final result'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Not our final result'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fold</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">,</span> identity<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myFunction1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We are now close to a final version, as this code can be optimized. The\ncontrol flow is now happening at a higher level thanks to the different\nfunctions for working with data types. I would challenge the reader to create\nhandler called <code class=\"language-text\">always</code> that takes a left or a right and runs the same\nfunction. While we are not at the point, yet, of having the best error messages\nwe can certainly replace <code class=\"language-text\">string</code> with an object that contains a bit more context\nfor downstream code to enable cleaning up of resources.</p>\n<p>Hopefully this discussion has piqued your interest for digging deeper into\nhow we handle errors in our code. There are, of course, different theses\nabout using abstract data types in to handle errors in this way<sup>4</sup>.\nI would argue we need to use (and sometimes abuse) of the tools we have at\nour disposal to their maximal extent. In the case of TypeScript we have\nstructural type checking that we can use and abuse, I would like to talk\nabout this more in a follow up post. For now, thanks for reading!</p>\n<h3>Notes</h3>\n<ol>\n<li>The <a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide\">Mostly adequate guide</a> does an excellent\njob of getting hands on with Monads and I would highly recommend checking it out.</li>\n<li>See the <a href=\"https://github.com/fantasyland/fantasy-land#fantasy-land-specification\">fantasy land specification</a>\nfor where Monads fit in with other general data types. <code class=\"language-text\">Maybe</code> is a similar instance to <code class=\"language-text\">Either</code> but it uses different tags.</li>\n<li>fp-ts already has an implementation of <code class=\"language-text\">jsonParse</code> called <code class=\"language-text\">parseJson</code>, but I decided to implement one as\nit is a nice simple case for getting started.</li>\n<li><a href=\"https://youtu.be/YR5WdGrpoug\">This talk</a> by Rich Hickey is quite a famous one that contains a lot of wisdom regarding some of the pitfalls of\nabstract data types.</li>\n</ol>","frontmatter":{"title":"Errors and Either","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/code/either/","previous":{"fields":{"slug":"/code/errors/"},"frontmatter":{"title":"Errors"}},"next":null}}