{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"74e46fc3-fe38-5bf2-889e-ee5e61ee9fda","excerpt":"Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nTo a computer, at the lowest level, an instruction…","html":"<br/>\n<p>Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nTo a computer, at the lowest level, an instruction could be take these binary values (inputs), perform a\nlogical operation, and generate a new binary value (output). In this idealised model there is not really\nmuch unexpected that could happen — other than the power socket being yanked out. However, this level\nof instruction is not under consideration for day to day programming. It is too low level. Advances in\nthe field of hardware and software have enable programmers to combine over hundreds of thousands of these\nlower level instructions using text with semantic value to humans. This is enabled by <em>layering</em> concepts\nover <em>patterns</em>. This is called <em>abstraction</em> and is a very powerful idea in Computer Science. Travelling\nall the way up the onion we arrive at the text we read and write. Let’s call this the <em>text representation</em>\nof our program. It is one description of the program, and it happens to the be one that programmers interact\nwith the most.</p>\n<p>Where does this leave errors? Sometimes wedged between layers of abstraction. The reality is errors happen\nat different levels. It could be that errors occur because a carelessly scripted section of an application failed to consider\nan edge case. It could be that a layer separating our representation of the program</p>","frontmatter":{"title":"Errors","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/errors/","previous":{"fields":{"slug":"/elastic-and-zdog/"},"frontmatter":{"title":"Elastic and Zdog"}},"next":null}}