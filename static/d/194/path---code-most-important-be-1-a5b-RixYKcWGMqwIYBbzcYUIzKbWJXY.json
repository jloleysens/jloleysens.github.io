{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"c9696732-3116-50a1-a7d3-89b6af145961","excerpt":"In JavaScript there are so many different technologies to learn and become\nproficient with. Each introducing its own mental model and best practices.\nThis spans…","html":"<p>In JavaScript there are so many different technologies to learn and become\nproficient with. Each introducing its own mental model and best practices.\nThis spans databases all the way to user experience (UX) concerns. For some\nof these technologies understanding the operational concerns involved is a\nnon-trivial learning curve in itself. For instance, properly configuring a\ndatabase for your application is of vital importance for any serious web\napplication. The structuring but also the scaling of the database. Granted,\nthe advent of cloud in the early 2010s has made a lot of these operational\nconcerns easier to get started with they arguably also abstract away many\ndetails that can cause major issues or headaches in specific instances -\nor you may risk running an excessively large bill to the cloud providers\ndelight.</p>\n<p>The point of this post is to say that none of these things are important\nfor the programmer. Or at least not of the highest import. Understanding\ndifferent technologies can be substituted with understanding different\nmodels and techniques and what <em>algorithms</em> these different methods and\ntechniques make feasible and or infeasible. The most important role of\nthe programmer by my estimation is that of algorithmist. The individual\nwho cares most about what sequential steps are taken to solve a problem is\npredisposed to a vital part of programming. This individual cares at a low-level\nabout the order of execution.</p>\n<p>Take the example of a shopping cart. You can add and remove things from the\nshopping cart. The shopping cart knows what products it has and it knows that\nif it has two of the same product it should not display two of the same product\nbut rather a count of the number of items of that particular product the user\nhas in their cart.</p>\n<p>Think about how you might add something to a cart like this.</p>\n<p>Now think about how you might remove something from a cart like this.</p>\n<p>Clearly there are some concerns which must be wrestled with in order to create\nthe correct behaviour. The correct algorithm. Here is my fast and loose, imperative-style, take\non a solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// A cart containing product objects with id and count: { id: number, count: number } </span>\n<span class=\"token keyword\">const</span> cart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addToCart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">productToAdd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> product <span class=\"token keyword\">of</span> cart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> productToAdd<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// In JS ++ before the variable produces a different algorithm to</span>\n      <span class=\"token comment\">// ++ after the variable. Not of great import here however.</span>\n      <span class=\"token operator\">++</span>product<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  cart<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>productToAdd<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeFromCart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">productToRemove</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> idx <span class=\"token operator\">&lt;</span> cart<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> cart<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> productToRemove<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Here our unary first changes the algorithm</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>product<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cart<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I’d challenge the reader to consider how an algorithm might be written that\ncannot work by mutation as many languages require and certain patterns in\nJavaScript like flux.</p>\n<p>I intended this post as a reminder to myself, more than for others about the biggest, most important role of the programmer. Happy algorithming!</p>","frontmatter":{"title":"The most important thing a programmer does","date":"June 15, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/code/most-important/","previous":{"fields":{"slug":"/code/fp-in-js/"},"frontmatter":{"title":"(Don't) write FP in JS"}},"next":null}}