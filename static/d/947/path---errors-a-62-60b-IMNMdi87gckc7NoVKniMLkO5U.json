{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"74e46fc3-fe38-5bf2-889e-ee5e61ee9fda","excerpt":"Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nAn unexpected event may sound like a rare special…","html":"<br/>\n<p>Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nAn <em>unexpected event</em> may sound like a rare special occurrence that requires extraordinary measures, but\nin programming errors are far from rare and, as I hope to argue, should also be as far from special\nas possible.</p>\n<p>To a computer, at the lowest level, an instruction could be take these binary values (inputs), perform a\nlogical operation, and generate a new binary value (output). In this idealised model there is not really\nmuch unexpected that could happen — other than the power socket being yanked out. However, this level\nof instruction is not under consideration for day to day programming. It is too low level. Advances in\nthe field of hardware and software have enable programmers to combine over hundreds of thousands of these\nlower level instructions. We have created and <em>layered</em> concepts over <em>patterns</em> which has lead to an onion-like model\nof layers upon layers. This pattern itself is called <em>abstraction</em> and is a very powerful idea in Computer Science.\nTravelling up from the lowest layer of the onion we arrive at the text we read and write. Let’s call this\nthe <em>text representation</em> of our program. It is one description of the program, and it happens to the be\none that programmers interact with the most, so also where our creative problem solving efforts are\nimplemented for the problem we are (hopefully) solving.</p>\n<p>Where does this leave errors? Sometimes wedged between the edges of the layers of abstraction — a message\nto a lower level lost in translation or misinterpreted. This class of error can either be very simple to fix,\njust use the expected method for passing a message down, or it can be deadly serious, in which case our\n<em>text representation</em> is on very shaky ground<sup>1</sup>. A far more common class of unexpected events\narises from the combination of statefulness, our <em>text representation</em> and cognitive limitations. I don’t\nwant to belabour the point of <em>how</em> these errors arise, others have done a far better job of this than\nI could hope to<sup>2</sup>. What I would like to discuss is the role of errors themselves in the context\nof our programs and specifically, the control-flow of our programs.</p>\n<p>We started by stating that errors are intended to <em>express</em> an unexpected event. The question is, at whom\nis the <em>expression</em> aimed? Typically other humans, or if you have spent enough time programming you will have\nrun into errors of your own making. Let’s consider this JavaScript <code class=\"language-text\">TypeError</code> error:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'we never get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>When run in the browser the above program generates the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Uncaught TypeError: a.b is not a function\n    at &lt;anonymous&gt;:1:3</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>At the time of writing, <code class=\"language-text\">b</code> is not the name of a method that exists on the JavaScript number object and so\ncalling it get us into an error condition. This indicates something else too; errors exist only at runtime<sup>3</sup>.\nAt <em>runtime</em> practically means that for all the different environments and states that your program may\nrun in, possible error conditions will only reveal themselves at the latest possible moment, long\nafter you, and your colleagues, have considered the code complete and correct. This means, end users are\noften the ones who read the contents of error messages. Consider also the contents in this case <code class=\"language-text\">TypeError: a.b is not a function</code>.\nIn this instance, the fix for this error is clear, just don’t call a non-existent function! But this toy example is a far cry from a program doing something\nuseful (and usually non-trivial and <em>stateful</em>). The final thing to notice is that <em>errors impact control flow</em>. The log\nstatement is <em>never</em> reached — you can run this program until the heat death of the universe and the\nstatement “we never get here” will never be output to the browser console.</p>\n<p>One response to this scary world of errors at runtime is using built-in error containment mechanisms. In\nJavaScript this may look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'we never get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'but we do get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Running this program greets us with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">but we do get here</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Control flow, once again, is impacted, but something else has happened too, the specific error message has\nvanished. Even if we were to write more code for extracting information from the <code class=\"language-text\">e</code> variable created in the\n<code class=\"language-text\">catch</code> clause what we are we left with, at worst, is just the same description of <code class=\"language-text\">Uncaught TypeError: a.b is not a function</code>.\nGiven the number of text combinations that could express an error it is not feasible to build a self-healing\nprogram by just analyzing text descriptions of errors. There is one more avenue open to us: we can detect\nthat <em>type</em> of the error, in this case: <code class=\"language-text\">TypeError</code>. Alter our program again, we wind up with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'we never get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'but we do get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'also, we get here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This approach lends itself very well to an inheritance model of errors. As it happens, <code class=\"language-text\">TypeError</code> is also an instance\nof <code class=\"language-text\">Error</code>, so <code class=\"language-text\">e</code> would test true for both of those. An analogous approach exists in other programming languages.\nThis seems to bring a us a long way, if we simply extend the built in <code class=\"language-text\">Error</code> class we can create our own\nspecial family of sub-classes of errors. Problem solved!</p>\n<p>The best possible scenario I could imagine is one in which lower level errors are all handled and converted\ninto something humans can easily interpret and take appropriate action on. This fits better with the mental\nmodel of message passing than it does special events or extraordinary measures. The more “normal” we make\nerrors in the domain of programming the more naturally they can form part of our initial considerations<sup>4</sup>.\nDo not shy away from thinking about conceivable error states, and then do not shy away from confronting\nerror states you may not be able to conceive of given current information.</p>\n<h3>Notes</h3>\n<ol>\n<li>This can also be considered the price of abstraction, because we are far removed from what is <em>actually</em>\nhappening, if any layer below is unreliable, we are unreliable.</li>\n<li>For instance <a href=\"http://curtclifton.net/papers/MoseleyMarks06a.pdf\">Out of the Tarpit</a> is a fantastic article\non the pitfalls of carelessly managing state.</li>\n<li>Other, compiled languages, would never have generated a program that would allow an error like this, but\nI am putting this consideration aside because they can still allow analogous errors to occur; albeit\nhidden amidst a lot more text usually.</li>\n<li>Monads are one response to forcing us to engage with the possibility that many parts of our program can\ncreate “unexpected” results.</li>\n</ol>","frontmatter":{"title":"Errors","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/errors/","previous":{"fields":{"slug":"/elastic-and-zdog/"},"frontmatter":{"title":"Elastic and Zdog"}},"next":null}}