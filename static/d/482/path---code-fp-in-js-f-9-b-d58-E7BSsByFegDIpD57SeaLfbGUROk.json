{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"6527f22e-0093-5aaf-aa62-ae21b0e3a6af","excerpt":"I enjoy the teachings and precepts of Functional Programming (FP). I enjoy the\nsimplicity of it. It tends to force you to think of one thing at a time. A\nquote…","html":"<p>I enjoy the teachings and precepts of Functional Programming (FP). I enjoy the\nsimplicity of it. It tends to force you to think of one thing at a time. A\nquote that unlocked the power of FP for me is by Alan J. Perlis, as stated in\nClojure’s rationale<sup>1</sup>:</p>\n<blockquote>\n<p>It is better to have 100 functions operate on one data structure than to have\n10 functions operate on 10 data structures.</p>\n</blockquote>\n<p>This idea, for me, shook the world of Object Oriented Programming (OOP). I am not\nconvinced that OOP has been rendered without use, but there is\ncertainly something to be said for working with composable units (functions) that\nunderstand a shared interface. Like arrays or lists. These are extremely simple\ndata structures that know nothing about your business logic. When we start creating\nour own functions that operate on arrays and return arrays we quickly gain the ability\nto express different sequences of higher-level operations. See Doug McIlroy’s solution\nto the problem of finding the frequency of different words in a text file<sup>2</sup>.</p>\n<p>To top it off all of this is possible in JavaScript - as in many other\nlanguages. What makes it even more pleasant to write code in this way is that\nfunctions are values in the same way that objects or numbers are. This means\nwhen can write functions that take functions as arguments — a pattern that is\nused extensively in many applications to solve different problems.</p>\n<h3>Notes</h3>\n<ol>\n<li>Listed as one of the points <a href=\"https://clojure.org/about/rationale#_object_orientation_is_overrated\">here</a></li>\n<li><a href=\"https://youtu.be/AkYDsiRVqno?t=875\">Talk section</a> by Stefan Tilkov.</li>\n</ol>","frontmatter":{"title":"(Don't) write FP in JS","date":"March 21, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/code/fp-in-js/","previous":{"fields":{"slug":"/code/elastic-and-zdog/"},"frontmatter":{"title":"Elastic and Zdog"}},"next":{"fields":{"slug":"/code/errors/"},"frontmatter":{"title":"Errors"}}}}