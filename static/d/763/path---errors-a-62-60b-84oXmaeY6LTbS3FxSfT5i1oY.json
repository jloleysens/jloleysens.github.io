{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"74e46fc3-fe38-5bf2-889e-ee5e61ee9fda","excerpt":"Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nTo a computer, at the lowest level, an instruction…","html":"<br/>\n<p>Program errors are intended to express unexpected events during the carrying out of a set of instructions.\nTo a computer, at the lowest level, an instruction could be take these binary values (inputs), perform a\nlogical operation, and generate a new binary value (output). In this idealised model there is not really\nmuch unexpected that could happen — other than the power socket being yanked out. However, this level\nof instruction is not under consideration for day to day programming. It is too low level. Advances in\nthe field of hardware and software have enable programmers to combine over hundreds of thousands of these\nlower level instructions. We have created and <em>layered</em> concepts over <em>patterns</em> which has lead to an onion-like model\nof layers upon layers. This pattern itself is called <em>abstraction</em> and is a very powerful idea in Computer Science.\nTravelling up from the lowest layer of the onion we arrive at the text we read and write. Let’s call this\nthe <em>text representation</em> of our program. It is one description of the program, and it happens to the be\none that programmers interact with the most, so also where our creative problem solving efforts are\nimplemented for the problem we are (hopefully) solving.</p>\n<p>Where does this leave errors? Sometimes wedged between the edges of the layers of abstraction — a message\nto a lower level lost in translation or misinterpreted. This class of error can either be very simple to fix,\njust use the expected method for passing a message down, or it can be deadly serious, in which case our\n<em>text representation</em> is on very shaky ground<sup>1</sup>. A far more common class of unexpected events\narises from statefulness, our <em>text representation</em> and cognitive limitations. I don’t want to belabour\nthe point here, others have done a far better job of this than I could hope to here<sup>2</sup></p>\n<h3>Notes</h3>\n<ol>\n<li>This can also be considered the price of abstraction, because we are far removed from what is <em>actually</em>\nhappening, if any layer below is unreliable, we are unreliable.</li>\n<li>For instance <a href=\"http://curtclifton.net/papers/MoseleyMarks06a.pdf\">Out of the Tarpit</a> is a fantastic article\non the pitfalls of carelessly managing state.</li>\n</ol>","frontmatter":{"title":"Errors","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/errors/","previous":{"fields":{"slug":"/elastic-and-zdog/"},"frontmatter":{"title":"Elastic and Zdog"}},"next":null}}