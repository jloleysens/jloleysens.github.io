{"data":{"site":{"siteMetadata":{"title":"JλO","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"22ef3de9-4f3a-5331-a6a8-9bd6a5eb9833","excerpt":"Welcome to yet another post on the Internet about Monads! I am only mostly\nkidding. I do not intend to use this post as an introduction to\nMonads1. This post is…","html":"<br />\n<p>Welcome to yet another post on the Internet about Monads! I am only mostly\nkidding. I do not intend to use this post as an introduction to\nMonads<sup>1</sup>. This post is actually a continuation of <a href=\"../errors\">my post on\nerrors</a>, and I would like to dig into the practical upshots of\nimplementing more thorough and efficient means of handling errors.\nSpecifically I am picking up the sentiment that <em>we can do better</em>\nand measurably so.</p>\n<p>Consider the following diagram:</p>\n<figure class=\"my-figure\">\n  <a name=\"fig1\">\n    <img src=\"../../pics/either/myprogram1.png\" alt=\"My program figure 1\" title=\"My program figure 1\">\n  </a>\n  <figcaption>Figure 1</figcaption>\n</figure>\n<p>Figure 1 features elements of a typical program; a start point, branch\nconditions and terminus points. Real programs could be expressed as sets of\nthese diagrams linked together, one’s output the input of the next. Our\nbranching here is focused on errors. Each diamond is a point at which we take\nan action that <em>could</em> result in an error condition. The <code class=\"language-text\">s</code> branch indicates\na successful result where the <code class=\"language-text\">e</code> branch indicates an unsuccessful result.\nThis is the error <em>control-flow</em> inherent in any program that could have\nerror conditions.</p>\n<p>The different terminus nodes indicate different end states that our program\ncan reach. Each end state indicates a different output. This toy program has\nfour different potential terminus states. We can imagine that if this program\ngrew to any level of complexity we would see an explosion of terminus states\nemerging as we introduce new points of error.</p>\n<p>Moreover, a terminus state represents the end of the programmers <em>intent</em>. It\nis saying “We have reached this point without generating the outcome we had\nhoped, so send a message back <em>expressing this unexpected event</em>“.</p>\n<p>Programming in this way may sound like an ungracious description of how many\nprograms work, but practice is often not far off from this. Consider this\nJavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unlockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingDangerous</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">'resource'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> locked <span class=\"token operator\">=</span> <span class=\"token function\">lockSomeResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">doSomethingDangerous</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This code is a representation of one of the diamonds in <a href=\"./#fig1\">Figure 1</a>.\nClearly we will reach the <code class=\"language-text\">e</code> branch. And log the error to the browser\nconsole. But consider what might happen if unlocking the resource is a known\npotential point of error too. To achieve our goal of improved error messages\nwe might make the following alterations:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unlockSomeResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nope!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingCoolButDangerous</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got burned!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">resource</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> locked <span class=\"token operator\">=</span> <span class=\"token function\">lockSomeResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">doSomethingCoolButDangerous</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`something went wrong with locking the resource or doing something dangerous, either way: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">unlockSomeResource</span><span class=\"token punctuation\">(</span>locked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`could not unlock the resource because: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The snippet above is a representation of a path in <a href=\"./#fig1\">Figure 1</a> where\nwe reach two, successive error conditions. Nested try-catch blocks may seem\nlike overkill but they are the only way to ensure that our error states are\nkept in check. We can continue to flesh out this example and perhaps refactor\nour code so that each potentially dangerous call is inside of it’s own\ntry-catch block, we may even be tempted to provide a more generic way of\nprovisioning these try-catch-finally blocks for functions (at our own\nexpense). The potential danger of swallowing errors is creating programs that\n<em>do not correctly “break” when they should</em>. Another point to notice here\nis that we have assumed <code class=\"language-text\">myFunction1</code> should return something to the caller.\nEither it is the result of <code class=\"language-text\">doSomethingCoolButDangerous</code> or it is <code class=\"language-text\">undefined</code>\n— which is our implicit way of communicating that something went wrong,\nlet’s say we made this part of our contract to calling code. This is\nhow a lot of programs operate. I would like to assert we can do\nbetter than this, and write less code with less nesting. Consider this\nrevision to our graph:</p>\n<figure class=\"my-figure\">\n  <a name=\"fig2\">\n    <img src=\"../../pics/either/myprogram2.png\" alt=\"My program figure 2\" title=\"My program figure 2\">\n  </a>\n  <figcaption>Figure 2</figcaption>\n</figure>\n<p>In the figure above we have eliminated all terminus points but one. In some sense\nthe diamonds have been made <em>totally irrelevant</em> to the output of our\nprogram. I would like to demonstrate that this is what the <code class=\"language-text\">Either</code> monad\nwas made for. All paths lead to one output, no matter what happens. <code class=\"language-text\">Either</code> can be considered an abstract way\nof expressing uncertainty in our programs and so it is a very general data\ntype<sup>2</sup>. The way <code class=\"language-text\">Either</code> makes this possible is by placing the\nresult of our function inside of a <em>tagged container</em>. It is this tagging\nthat lets subsequent code know whether some went right or wrong, in <code class=\"language-text\">Either</code>\nterms; <em>left</em> or <em>right</em>. Left denotes a failure where right denotes a success.\nBy placing values inside of containers like this we are able to associate some\nmetadata with the a given output. Consider this example (in TypeScript):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unsafeJSONParse</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">unknownString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> object <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This function can easily represent one of the diamonds in our program where\nan unknown string value can be passed in and one of two things will happen:\nan error, or a newly minted object. Consider this revision with <code class=\"language-text\">Either</code> as\nimplemented by <a href=\"https://github.com/gcanti/fp-ts/blob/dcf0b105061c99ea6c82abba31800d544fb851d5/src/Either.ts#L64\">fp-ts</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> tryCatch<span class=\"token punctuation\">,</span> Either <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jsonParse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>unknownString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> object<span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>unknownString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> Error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is slightly more verbose for a start, but if we look at the return type\nwe are now returning an <code class=\"language-text\">Either</code><sup>3</sup>! This change is most important\nat a <code class=\"language-text\">type</code> level: we have now declared that <code class=\"language-text\">jsonParse</code> no longer produces\nan <code class=\"language-text\">object</code> but <code class=\"language-text\">Right&lt;object&gt;</code> <em>or</em> <code class=\"language-text\">Left&lt;string&gt;</code>. The <code class=\"language-text\">Right</code> <em>or</em> <code class=\"language-text\">Left</code>\nresult of this function is what enables us to eliminate other terminus points\nand there is one other really neat upshot; we can now generically handle\ncontrol flow introduced by errors. There is no need to ever have a nested\ntry-catch block again. Returning to our example from earlier, we can refactor\nlike so (still using fp-ts):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<h3>Notes</h3>\n<ol>\n<li>The <a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide\">Mostly adequate guide</a> does an excellent\njob of getting hands on with Monads and I would highly recommend checking it out.</li>\n<li>See the <a href=\"https://github.com/fantasyland/fantasy-land#fantasy-land-specification\">fantasy land specification</a>\nfor where Monads fit in with other general data types. <code class=\"language-text\">Maybe</code> is a similar instance to <code class=\"language-text\">Either</code> but it uses different tags.</li>\n<li>fp-ts already has an implementation of <code class=\"language-text\">jsonParse</code> called <code class=\"language-text\">parseJson</code>, but I decided to implement one as\nit is a nice simple case for getting started.</li>\n</ol>","frontmatter":{"title":"Errors and Either","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/code/either/","previous":{"fields":{"slug":"/code/errors/"},"frontmatter":{"title":"Errors"}},"next":null}}