{"data":{"site":{"siteMetadata":{"title":"Jean-Louis Leysens","author":"Jean-Louis Leysens"}},"markdownRemark":{"id":"ec8db705-506d-5681-8db2-054c8fd1e319","excerpt":"For roughly the past 5 years I have been working as a software developer. This role, to my mind, fully entails the act of writing, maintaining and, if you are…","html":"<br />\n<p>For roughly the past 5 years I have been working as a software developer. This role, to my mind, fully entails the act of writing, maintaining and, if you are lucky, deleting code. As I have mentioned in <a href=/code/most-important>a previous post </a> the thing that is, hopefully, occupying your thinking as a software developer will be algorithms.</p>\n<p>Not all algorithms are equal. Some are far more stimulating than others and that is partly due to levels of complexity but also the knowledge domain that the algorithm is embedded in. Creating an algorithm for parsing code semantics is rather different to an algorithm for a perceptron used in machine learning. At a basic level of sophistication these algorithms are not “hard” to code but their beauty becomes more apparent in their essential parts. The difficult part, by my estimation, is developing an intuitive understanding of the reason for the existence of each basic part. This requires domain knowledge which usually means careful study is required.</p>\n<p>The reason I mention all of this is because these are things I believe software developers should foster a deep care and respect for. Different algorithms and their overall fit. To take an analogy from the scientific world; writing code is like creating a hypothesis. You do it based on data (hopefully), you draw from pre-existing knowledge (hopefully), you submit your hypothesis for peer-review (hopefully) you revisit your hypothesis as time goes on (hopefully). These are all things that happen in the lifecycle of code.</p>\n<p>Once software development has become your primary way of thinking you can use this to great effect in other parts of your life. Certain individuals are born thinking this way. I had to learn it. I had a moderate-level of aptitude for logical thinking. I would say I was more analytical than raw logical. Not overly invested in all of the details. I also have a deep love for creative thinking — something I love about creating music. Over time, and after much practice, I would say that more detail-oriented logical thinking often used in software development has become natural to me. The fruit of thousands of hours of labour!</p>\n<p>I have realised that acquiring software-developer-thinking also affords the ability to intuit what kinds of problems computers are really good at solving. The deeper ones understanding the better you are able to apply this kind of thinking <em>laterally</em>.</p>","frontmatter":{"title":"Coding a product","date":"August 29, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"code","slug":"/code/coding-a-product/","previous":{"fields":{"slug":"/code/most-important/"},"frontmatter":{"title":"The most important thing a programmer does"}},"next":null}}